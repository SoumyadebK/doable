<?php

use Stripe\Stripe;

function connectDatabase($PK_ACCOUNT_MASTER)
{
    global $db;
    $db_details = $db->Execute("SELECT DB_NAME FROM `DOA_ACCOUNT_MASTER` WHERE PK_ACCOUNT_MASTER = " . $PK_ACCOUNT_MASTER);
    $DB_NAME = $db_details->fields['DB_NAME'];
    $db1 = new queryFactory();
    if ($_SERVER['HTTP_HOST'] == 'localhost') {
        $conn1 = $db1->connect('localhost', 'root', '', $DB_NAME);
    } else {
        $conn1 = $db1->connect('localhost', 'root', 'b54eawxj5h8ev', $DB_NAME);
    }
    if ($db1->error_number) {
        die("Connection Error");
    }
    return $db1;
}

function getEmailAccountData($db1, $PK_LOCATION)
{
    $email_account_data = $db1->Execute("SELECT * FROM `DOA_EMAIL_ACCOUNT` WHERE USER_NAME != '' AND PASSWORD != '' AND HOST != '' AND PORT != '' AND `PK_LOCATION` = " . $PK_LOCATION);
    if ($email_account_data->RecordCount() == 0) {
        $email_account_data = $db1->Execute("SELECT * FROM `DOA_EMAIL_ACCOUNT` WHERE `PK_LOCATION` = 0");
    }
    return $email_account_data;
}

function getSalesTax($PK_LOCATION)
{
    global $db;
    $sales_tax_data = $db->Execute("SELECT SALES_TAX FROM `DOA_LOCATION` WHERE `PK_LOCATION` = " . $PK_LOCATION);
    if ($sales_tax_data->fields['SALES_TAX'] <= 0) {
        $sales_tax_data = $db->Execute("SELECT SALES_TAX FROM `DOA_ACCOUNT_MASTER` WHERE `PK_ACCOUNT_MASTER` = " . $_SESSION['PK_ACCOUNT_MASTER']);
    }
    return $sales_tax_data->fields['SALES_TAX'];
}

function markAppointmentPaid($PK_ENROLLMENT_SERVICE): void
{
    global $db_account;
    $serviceCodeData = $db_account->Execute("SELECT PK_ENROLLMENT_SERVICE, NUMBER_OF_SESSION, TOTAL_AMOUNT_PAID, PRICE_PER_SESSION FROM DOA_ENROLLMENT_SERVICE WHERE PK_ENROLLMENT_SERVICE = " . $PK_ENROLLMENT_SERVICE);
    if ($serviceCodeData->RecordCount() > 0) {
        $paid_session = ($serviceCodeData->fields['PRICE_PER_SESSION'] > 0) ? ceil($serviceCodeData->fields['TOTAL_AMOUNT_PAID'] / $serviceCodeData->fields['PRICE_PER_SESSION']) : $serviceCodeData->fields['NUMBER_OF_SESSION'];
        if ($paid_session >= 1) {
            $db_account->Execute("UPDATE `DOA_APPOINTMENT_MASTER` SET `IS_PAID` = '1' WHERE APPOINTMENT_TYPE = 'NORMAL' AND PK_ENROLLMENT_SERVICE = '$PK_ENROLLMENT_SERVICE' AND PK_APPOINTMENT_STATUS NOT IN (3, 4, 6) ORDER BY DATE ASC, START_TIME ASC LIMIT $paid_session");
        }
    }
}

function adjustEnrollmentAppointment($PK_APPOINTMENT_MASTER): void
{
    global $db_account;
    $enrollment_service_data = $db_account->Execute("SELECT DOA_ENROLLMENT_SERVICE.PK_ENROLLMENT_MASTER, DOA_ENROLLMENT_SERVICE.PK_ENROLLMENT_SERVICE, DOA_ENROLLMENT_SERVICE.PK_SERVICE_MASTER, DOA_ENROLLMENT_SERVICE.NUMBER_OF_SESSION, DOA_APPOINTMENT_MASTER.PK_LOCATION FROM DOA_ENROLLMENT_SERVICE LEFT JOIN DOA_APPOINTMENT_MASTER ON DOA_ENROLLMENT_SERVICE.PK_ENROLLMENT_SERVICE = DOA_APPOINTMENT_MASTER.PK_ENROLLMENT_SERVICE WHERE DOA_APPOINTMENT_MASTER.PK_APPOINTMENT_MASTER = $PK_APPOINTMENT_MASTER");
    if ($enrollment_service_data->RecordCount() > 0) {
        $enrollment_data = $db_account->Execute("SELECT CHARGE_TYPE FROM `DOA_ENROLLMENT_MASTER` WHERE PK_ENROLLMENT_MASTER = " . $enrollment_service_data->fields['PK_ENROLLMENT_MASTER']);
        if ($enrollment_data->fields['CHARGE_TYPE'] == 'Membership') {
            $NUMBER_OF_SESSION = 99;
        } else {
            $NUMBER_OF_SESSION = $enrollment_service_data->fields['NUMBER_OF_SESSION'];
        }
        $PK_ENROLLMENT_SERVICE = $enrollment_service_data->fields['PK_ENROLLMENT_SERVICE'];
        $SESSION_CREATED_COUNT = getAllSessionCreatedCount($PK_ENROLLMENT_SERVICE, 'NORMAL');
        if ($SESSION_CREATED_COUNT > $NUMBER_OF_SESSION) {
            $last_appointment_id = $db_account->Execute("SELECT DOA_APPOINTMENT_MASTER.PK_APPOINTMENT_MASTER FROM DOA_APPOINTMENT_MASTER WHERE PK_ENROLLMENT_SERVICE = '$PK_ENROLLMENT_SERVICE' AND ((`PK_APPOINTMENT_STATUS` != 6 AND `PK_APPOINTMENT_STATUS` != 4) OR IS_CHARGED = 1) ORDER BY DOA_APPOINTMENT_MASTER.DATE DESC, DOA_APPOINTMENT_MASTER.START_TIME DESC LIMIT 1");
            $PK_APPOINTMENT_MASTER_LAST = $last_appointment_id->fields['PK_APPOINTMENT_MASTER'];

            $APPOINTMENT_DATA['PK_ENROLLMENT_MASTER'] = 0;
            $APPOINTMENT_DATA['PK_ENROLLMENT_SERVICE'] = 0;
            $APPOINTMENT_DATA['APPOINTMENT_TYPE'] = 'AD-HOC';
            $APPOINTMENT_DATA['IS_PAID'] = 0;
            db_perform_account('DOA_APPOINTMENT_MASTER', $APPOINTMENT_DATA, 'update', " PK_APPOINTMENT_MASTER = " . $PK_APPOINTMENT_MASTER_LAST);
            $db_account->Execute("DELETE FROM `DOA_APPOINTMENT_ENROLLMENT` WHERE `PK_APPOINTMENT_MASTER` = " . $PK_APPOINTMENT_MASTER_LAST);

            $appointment_data = $db_account->Execute("SELECT DOA_APPOINTMENT_MASTER.PK_SERVICE_MASTER, DOA_APPOINTMENT_MASTER.PK_SERVICE_CODE, DOA_APPOINTMENT_MASTER.PK_LOCATION, DOA_APPOINTMENT_CUSTOMER.PK_USER_MASTER FROM DOA_APPOINTMENT_MASTER INNER JOIN DOA_APPOINTMENT_CUSTOMER ON DOA_APPOINTMENT_MASTER.PK_APPOINTMENT_MASTER = DOA_APPOINTMENT_CUSTOMER.PK_APPOINTMENT_MASTER WHERE DOA_APPOINTMENT_MASTER.PK_APPOINTMENT_MASTER = " . $PK_APPOINTMENT_MASTER_LAST);
            checkAdhocAppointmentStatus($PK_APPOINTMENT_MASTER_LAST, $appointment_data->fields['PK_SERVICE_MASTER'], $appointment_data->fields['PK_SERVICE_CODE'], $appointment_data->fields['PK_USER_MASTER'], $appointment_data->fields['PK_LOCATION']);
        } elseif ($SESSION_CREATED_COUNT < $NUMBER_OF_SESSION) {
            $appointment_user = $db_account->Execute("SELECT PK_USER_MASTER FROM DOA_APPOINTMENT_CUSTOMER WHERE PK_APPOINTMENT_MASTER = $PK_APPOINTMENT_MASTER");
            $PK_USER_MASTER = $appointment_user->fields['PK_USER_MASTER'];
            $PK_SERVICE_MASTER = $enrollment_service_data->fields['PK_SERVICE_MASTER'];
            $PK_LOCATION = $enrollment_service_data->fields['PK_LOCATION'];
            $add_hoc_appointments = $db_account->Execute("SELECT DOA_APPOINTMENT_MASTER.PK_APPOINTMENT_MASTER, DOA_APPOINTMENT_MASTER.IS_CHARGED FROM DOA_APPOINTMENT_MASTER INNER JOIN DOA_APPOINTMENT_CUSTOMER ON DOA_APPOINTMENT_MASTER.PK_APPOINTMENT_MASTER = DOA_APPOINTMENT_CUSTOMER.PK_APPOINTMENT_MASTER WHERE DOA_APPOINTMENT_CUSTOMER.PK_USER_MASTER = '$PK_USER_MASTER' AND DOA_APPOINTMENT_MASTER.PK_SERVICE_MASTER = '$PK_SERVICE_MASTER' AND DOA_APPOINTMENT_MASTER.PK_LOCATION = '$PK_LOCATION' AND DOA_APPOINTMENT_MASTER.APPOINTMENT_TYPE = 'AD-HOC' ORDER BY DOA_APPOINTMENT_MASTER.DATE ASC, DOA_APPOINTMENT_MASTER.START_TIME ASC LIMIT 1");
            if ($add_hoc_appointments->RecordCount() > 0) {
                $PK_APPOINTMENT_MASTER_AD_HOC = $add_hoc_appointments->fields['PK_APPOINTMENT_MASTER'];

                $APPOINTMENT_DATA['PK_ENROLLMENT_MASTER'] = $enrollment_service_data->fields['PK_ENROLLMENT_MASTER'];
                $APPOINTMENT_DATA['PK_ENROLLMENT_SERVICE'] = $enrollment_service_data->fields['PK_ENROLLMENT_SERVICE'];
                $APPOINTMENT_DATA['APPOINTMENT_TYPE'] = 'NORMAL';
                db_perform_account('DOA_APPOINTMENT_MASTER', $APPOINTMENT_DATA, 'update', " PK_APPOINTMENT_MASTER = " . $PK_APPOINTMENT_MASTER_AD_HOC);
                markAppointmentPaid($enrollment_service_data->fields['PK_ENROLLMENT_SERVICE']);
            } else {
                $last_enrollment_appointment = $db_account->Execute("SELECT DOA_APPOINTMENT_MASTER.PK_APPOINTMENT_MASTER, DOA_APPOINTMENT_MASTER.PK_ENROLLMENT_MASTER, DOA_APPOINTMENT_MASTER.PK_ENROLLMENT_SERVICE FROM DOA_APPOINTMENT_MASTER INNER JOIN DOA_APPOINTMENT_CUSTOMER ON DOA_APPOINTMENT_MASTER.PK_APPOINTMENT_MASTER = DOA_APPOINTMENT_CUSTOMER.PK_APPOINTMENT_MASTER INNER JOIN DOA_ENROLLMENT_MASTER ON DOA_APPOINTMENT_MASTER.PK_ENROLLMENT_MASTER = DOA_ENROLLMENT_MASTER.PK_ENROLLMENT_MASTER WHERE DOA_APPOINTMENT_CUSTOMER.PK_USER_MASTER = '$PK_USER_MASTER' AND DOA_APPOINTMENT_MASTER.PK_SERVICE_MASTER = '$PK_SERVICE_MASTER' AND DOA_ENROLLMENT_MASTER.STATUS = 'A' AND (`PK_APPOINTMENT_STATUS` != 6 AND `PK_APPOINTMENT_STATUS` != 4) ORDER BY DOA_ENROLLMENT_MASTER.PK_ENROLLMENT_MASTER DESC, DOA_APPOINTMENT_MASTER.DATE ASC, DOA_APPOINTMENT_MASTER.START_TIME ASC LIMIT 1");
                if ($last_enrollment_appointment->fields['PK_ENROLLMENT_MASTER'] > $enrollment_service_data->fields['PK_ENROLLMENT_MASTER']) {
                    markEnrollmentComplete($last_enrollment_appointment->fields['PK_ENROLLMENT_MASTER']);
                    $APPOINTMENT_DATA['PK_ENROLLMENT_MASTER'] = $enrollment_service_data->fields['PK_ENROLLMENT_MASTER'];
                    $APPOINTMENT_DATA['PK_ENROLLMENT_SERVICE'] = $enrollment_service_data->fields['PK_ENROLLMENT_SERVICE'];
                    $APPOINTMENT_DATA['APPOINTMENT_TYPE'] = 'NORMAL';
                    db_perform_account('DOA_APPOINTMENT_MASTER', $APPOINTMENT_DATA, 'update', " PK_APPOINTMENT_MASTER = " . $last_enrollment_appointment->fields['PK_APPOINTMENT_MASTER']);
                    markEnrollmentComplete($enrollment_service_data->fields['PK_ENROLLMENT_MASTER']);
                }
            }
        }
    }
}

/*function markAppointmentAdhoc($PK_ENROLLMENT_SERVICE): void
{
    global $db_account;

    $SESSION_CREATED_COUNT = getAllSessionCreatedCount($PK_ENROLLMENT_SERVICE, 'NORMAL');

    $enrollment_session = $db_account->Execute("SELECT PK_ENROLLMENT_SERVICE, PK_ENROLLMENT_MASTER, PK_SERVICE_MASTER, NUMBER_OF_SESSION FROM DOA_ENROLLMENT_SERVICE WHERE PK_ENROLLMENT_SERVICE = '$PK_ENROLLMENT_SERVICE'");
    if ($SESSION_CREATED_COUNT > $enrollment_session->fields['NUMBER_OF_SESSION']) {
        $last_appointment_id = $db_account->Execute("SELECT DOA_APPOINTMENT_MASTER.PK_APPOINTMENT_MASTER FROM DOA_APPOINTMENT_MASTER WHERE PK_ENROLLMENT_SERVICE = '$PK_ENROLLMENT_SERVICE' AND ((`PK_APPOINTMENT_STATUS` != 6 AND `PK_APPOINTMENT_STATUS` != 4) OR IS_CHARGED = 1) ORDER BY DOA_APPOINTMENT_MASTER.DATE DESC, DOA_APPOINTMENT_MASTER.START_TIME DESC LIMIT 1");
        $PK_APPOINTMENT_MASTER = $last_appointment_id->fields['PK_APPOINTMENT_MASTER'];

        $APPOINTMENT_DATA['PK_ENROLLMENT_MASTER'] = 0;
        $APPOINTMENT_DATA['PK_ENROLLMENT_SERVICE'] = 0;
        $APPOINTMENT_DATA['APPOINTMENT_TYPE'] = 'AD-HOC';
        //$APPOINTMENT_DATA['SERIAL_NUMBER'] = 0;
        $APPOINTMENT_DATA['IS_PAID'] = 0;
        //$APPOINTMENT_DATA['IS_CHARGED'] = 0;
        db_perform_account('DOA_APPOINTMENT_MASTER', $APPOINTMENT_DATA, 'update', " PK_APPOINTMENT_MASTER = " . $PK_APPOINTMENT_MASTER);
        $db_account->Execute("DELETE FROM `DOA_APPOINTMENT_ENROLLMENT` WHERE `PK_APPOINTMENT_MASTER` = ".$PK_APPOINTMENT_MASTER);

        $appointment_data = $db_account->Execute("SELECT DOA_APPOINTMENT_MASTER.PK_SERVICE_MASTER, DOA_APPOINTMENT_MASTER.PK_SERVICE_CODE, DOA_APPOINTMENT_MASTER.PK_LOCATION, DOA_APPOINTMENT_CUSTOMER.PK_USER_MASTER FROM DOA_APPOINTMENT_MASTER LEFT JOIN DOA_APPOINTMENT_CUSTOMER ON DOA_APPOINTMENT_MASTER.PK_APPOINTMENT_MASTER = DOA_APPOINTMENT_CUSTOMER.PK_APPOINTMENT_MASTER WHERE DOA_APPOINTMENT_MASTER.PK_APPOINTMENT_MASTER = " . $PK_APPOINTMENT_MASTER);
        checkAdhocAppointmentStatus($PK_APPOINTMENT_MASTER, $appointment_data->fields['PK_SERVICE_MASTER'], $appointment_data->fields['PK_SERVICE_CODE'], $appointment_data->fields['PK_USER_MASTER'], $appointment_data->fields['PK_LOCATION']);
    } elseif ($SESSION_CREATED_COUNT < $enrollment_session->fields['NUMBER_OF_SESSION']) {
        markAdhocAppointmentNormal($enrollment_session->fields['PK_ENROLLMENT_MASTER']);
        $last_enrollment_appointment = $db_account->Execute("SELECT PK_APPOINTMENT_MASTER, PK_ENROLLMENT_MASTER, PK_ENROLLMENT_SERVICE FROM DOA_APPOINTMENT_MASTER WHERE PK_SERVICE_MASTER = ".$enrollment_session->fields['PK_SERVICE_MASTER']." AND ((`PK_APPOINTMENT_STATUS` != 6 AND `PK_APPOINTMENT_STATUS` != 4) OR IS_CHARGED = 1) ORDER BY PK_ENROLLMENT_MASTER DESC, DOA_APPOINTMENT_MASTER.DATE ASC, DOA_APPOINTMENT_MASTER.START_TIME ASC LIMIT 1");
        if ($last_enrollment_appointment->fields['PK_ENROLLMENT_MASTER'] > $enrollment_session->fields['PK_ENROLLMENT_MASTER']) {
            updateSessionCreatedAndCompletedCount($last_enrollment_appointment->fields['PK_APPOINTMENT_MASTER']);
            $APPOINTMENT_DATA['PK_ENROLLMENT_MASTER'] = $enrollment_session->fields['PK_ENROLLMENT_MASTER'];
            $APPOINTMENT_DATA['PK_ENROLLMENT_SERVICE'] = $enrollment_session->fields['PK_ENROLLMENT_SERVICE'];
            db_perform_account('DOA_APPOINTMENT_MASTER', $APPOINTMENT_DATA, 'update', " PK_APPOINTMENT_MASTER = " . $last_enrollment_appointment->fields['PK_APPOINTMENT_MASTER']);
            updateSessionCreatedAndCompletedCount($last_enrollment_appointment->fields['PK_APPOINTMENT_MASTER']);
        }
    }

}*/
function checkAdhocAppointmentStatus($PK_APPOINTMENT_MASTER, $PK_SERVICE_MASTER, $PK_SERVICE_CODE, $CUSTOMER_ID, $PK_LOCATION): void
{
    global $db_account;
    $enrollment_data = $db_account->Execute("SELECT DOA_ENROLLMENT_MASTER.PK_ENROLLMENT_MASTER, DOA_ENROLLMENT_SERVICE.PK_ENROLLMENT_SERVICE, DOA_ENROLLMENT_SERVICE.NUMBER_OF_SESSION, DOA_SERVICE_MASTER.PK_SERVICE_MASTER, DOA_SERVICE_CODE.PK_SERVICE_CODE FROM DOA_ENROLLMENT_MASTER INNER JOIN DOA_ENROLLMENT_SERVICE ON DOA_ENROLLMENT_MASTER.PK_ENROLLMENT_MASTER = DOA_ENROLLMENT_SERVICE.PK_ENROLLMENT_MASTER INNER JOIN DOA_SERVICE_MASTER ON DOA_ENROLLMENT_SERVICE.PK_SERVICE_MASTER = DOA_SERVICE_MASTER.PK_SERVICE_MASTER INNER JOIN DOA_SERVICE_CODE ON DOA_ENROLLMENT_SERVICE.PK_SERVICE_CODE = DOA_SERVICE_CODE.PK_SERVICE_CODE WHERE DOA_SERVICE_CODE.IS_GROUP = 0 AND DOA_ENROLLMENT_MASTER.STATUS = 'A' AND DOA_ENROLLMENT_SERVICE.PK_SERVICE_MASTER = $PK_SERVICE_MASTER AND DOA_ENROLLMENT_SERVICE.PK_SERVICE_CODE = $PK_SERVICE_CODE AND DOA_ENROLLMENT_MASTER.PK_USER_MASTER = $CUSTOMER_ID AND DOA_ENROLLMENT_MASTER.PK_LOCATION = $PK_LOCATION ORDER BY DOA_ENROLLMENT_MASTER.PK_ENROLLMENT_MASTER ASC LIMIT 1");
    if ($enrollment_data->RecordCount() > 0) {
        $SESSION_CREATED = getAllSessionCreatedCount($enrollment_data->fields['PK_ENROLLMENT_SERVICE'], 'NORMAL');
        if ($SESSION_CREATED < $enrollment_data->fields['NUMBER_OF_SESSION']) {
            $APPOINTMENT_DATA['PK_ENROLLMENT_MASTER'] = $enrollment_data->fields['PK_ENROLLMENT_MASTER'];
            $APPOINTMENT_DATA['PK_ENROLLMENT_SERVICE'] = $enrollment_data->fields['PK_ENROLLMENT_SERVICE'];
            $APPOINTMENT_DATA['APPOINTMENT_TYPE'] = 'NORMAL';
            db_perform_account('DOA_APPOINTMENT_MASTER', $APPOINTMENT_DATA, 'update', " PK_APPOINTMENT_MASTER = " . $PK_APPOINTMENT_MASTER);
            markAppointmentPaid($enrollment_data->fields['PK_ENROLLMENT_SERVICE']);
        }
    }
    markEnrollmentComplete($enrollment_data->fields['PK_ENROLLMENT_MASTER']);
}

function markAdhocAppointmentNormal($PK_ENROLLMENT_MASTER): void
{
    global $db_account;
    $enrollmentServiceData = $db_account->Execute("SELECT DOA_ENROLLMENT_SERVICE.*, DOA_ENROLLMENT_MASTER.PK_USER_MASTER, DOA_ENROLLMENT_MASTER.PK_LOCATION FROM DOA_ENROLLMENT_SERVICE LEFT JOIN DOA_ENROLLMENT_MASTER ON DOA_ENROLLMENT_MASTER.PK_ENROLLMENT_MASTER = DOA_ENROLLMENT_SERVICE.PK_ENROLLMENT_MASTER WHERE DOA_ENROLLMENT_MASTER.PK_ENROLLMENT_MASTER = " . $PK_ENROLLMENT_MASTER);
    while (!$enrollmentServiceData->EOF) {
        $PK_ENROLLMENT_SERVICE = $enrollmentServiceData->fields['PK_ENROLLMENT_SERVICE'];
        $PK_USER_MASTER = $enrollmentServiceData->fields['PK_USER_MASTER'];
        $PK_LOCATION = $enrollmentServiceData->fields['PK_LOCATION'];
        $PK_SERVICE_MASTER = $enrollmentServiceData->fields['PK_SERVICE_MASTER'];
        $PK_SERVICE_CODE = $enrollmentServiceData->fields['PK_SERVICE_CODE'];
        $NUMBER_OF_SESSION = $enrollmentServiceData->fields['NUMBER_OF_SESSION'];

        $session_created = $db_account->Execute("SELECT SUM(DOA_SCHEDULING_CODE.UNIT) AS SESSION_CREATED FROM `DOA_APPOINTMENT_MASTER` LEFT JOIN DOA_SCHEDULING_CODE ON DOA_APPOINTMENT_MASTER.PK_SCHEDULING_CODE = DOA_SCHEDULING_CODE.PK_SCHEDULING_CODE WHERE PK_APPOINTMENT_STATUS NOT IN (6,4) AND APPOINTMENT_TYPE = 'NORMAL' AND `PK_ENROLLMENT_SERVICE` = " . $PK_ENROLLMENT_SERVICE);
        $SESSION_CREATED_COUNT = ($session_created->RecordCount() > 0) ? $session_created->fields['SESSION_CREATED'] : 0;

        //$SESSION_CREATED_COUNT = getAllSessionCreatedCount($PK_ENROLLMENT_SERVICE, 'NORMAL');
        $SESSION_LEFT = $NUMBER_OF_SESSION - $SESSION_CREATED_COUNT;
        $SESSION_LEFT = ($SESSION_LEFT > 0 && $SESSION_LEFT < 1) ? 1 : (int)$SESSION_LEFT;
        //$SERIAL_NUMBER = getAppointmentSerialNumber($PK_USER_MASTER);

        $appointments = $db_account->Execute("SELECT DOA_APPOINTMENT_MASTER.PK_APPOINTMENT_MASTER, DOA_APPOINTMENT_MASTER.IS_CHARGED FROM DOA_APPOINTMENT_MASTER INNER JOIN DOA_APPOINTMENT_CUSTOMER ON DOA_APPOINTMENT_MASTER.PK_APPOINTMENT_MASTER = DOA_APPOINTMENT_CUSTOMER.PK_APPOINTMENT_MASTER WHERE DOA_APPOINTMENT_CUSTOMER.PK_USER_MASTER = '$PK_USER_MASTER' AND DOA_APPOINTMENT_MASTER.PK_SERVICE_MASTER = '$PK_SERVICE_MASTER' AND DOA_APPOINTMENT_MASTER.PK_SERVICE_CODE = '$PK_SERVICE_CODE' AND DOA_APPOINTMENT_MASTER.PK_LOCATION = '$PK_LOCATION' AND DOA_APPOINTMENT_MASTER.APPOINTMENT_TYPE = 'AD-HOC' ORDER BY DOA_APPOINTMENT_MASTER.DATE ASC, DOA_APPOINTMENT_MASTER.START_TIME ASC LIMIT " . $SESSION_LEFT);
        while (!$appointments->EOF) {
            $db_account->Execute("UPDATE `DOA_APPOINTMENT_MASTER` SET `PK_ENROLLMENT_MASTER` = '$PK_ENROLLMENT_MASTER',`PK_ENROLLMENT_SERVICE` = '$PK_ENROLLMENT_SERVICE', `APPOINTMENT_TYPE` = 'NORMAL' WHERE DOA_APPOINTMENT_MASTER.PK_APPOINTMENT_MASTER = " . $appointments->fields['PK_APPOINTMENT_MASTER']);
            updateSessionCreatedCount($PK_ENROLLMENT_SERVICE);
            if ($appointments->fields['IS_CHARGED'] == 1) {
                updateSessionCompletedCount($appointments->fields['PK_APPOINTMENT_MASTER']);
            }
            $appointments->MoveNext();
        }
        $enrollmentServiceData->MoveNext();
    }
    markEnrollmentComplete($PK_ENROLLMENT_MASTER);
}

function updateSessionCreatedCount($PK_ENROLLMENT_SERVICE)
{
    global $db_account;
    $session_created = $db_account->Execute("SELECT COUNT(PK_APPOINTMENT_MASTER) AS SESSION_CREATED FROM `DOA_APPOINTMENT_MASTER` WHERE ((`PK_APPOINTMENT_STATUS` != 6 AND `PK_APPOINTMENT_STATUS` != 4) OR IS_CHARGED = 1) AND `PK_ENROLLMENT_SERVICE` = " . $PK_ENROLLMENT_SERVICE);
    $SESSION_CREATED_COUNT = ($session_created->RecordCount() > 0) ? $session_created->fields['SESSION_CREATED'] : 0;
    $ENR_SERVICE_DATA['SESSION_CREATED'] = $SESSION_CREATED_COUNT;
    db_perform_account('DOA_ENROLLMENT_SERVICE', $ENR_SERVICE_DATA, 'update', " PK_ENROLLMENT_SERVICE = " . $PK_ENROLLMENT_SERVICE);
}

function updateSessionCompletedCount($PK_APPOINTMENT_MASTER)
{
    //updateSessionCreatedAndCompletedCount($PK_APPOINTMENT_MASTER);

    global $db_account;
    $appointmentData = $db_account->Execute("SELECT `PK_ENROLLMENT_SERVICE` FROM `DOA_APPOINTMENT_MASTER` WHERE `PK_APPOINTMENT_MASTER` = " . $PK_APPOINTMENT_MASTER);
    $PK_ENROLLMENT_SERVICE = $appointmentData->fields['PK_ENROLLMENT_SERVICE'];
    $serviceCodeData = $db_account->Execute("SELECT DOA_ENROLLMENT_SERVICE.PK_ENROLLMENT_SERVICE, DOA_ENROLLMENT_SERVICE.SESSION_COMPLETED, DOA_ENROLLMENT_SERVICE.NUMBER_OF_SESSION, DOA_ENROLLMENT_MASTER.PK_ENROLLMENT_MASTER, DOA_ENROLLMENT_MASTER.PK_USER_MASTER, DOA_ENROLLMENT_MASTER.CHARGE_TYPE FROM DOA_ENROLLMENT_SERVICE JOIN DOA_ENROLLMENT_MASTER ON DOA_ENROLLMENT_MASTER.PK_ENROLLMENT_MASTER = DOA_ENROLLMENT_SERVICE.PK_ENROLLMENT_MASTER WHERE PK_ENROLLMENT_SERVICE = " . $PK_ENROLLMENT_SERVICE);
    /*if ($serviceCodeData->RecordCount() > 0) {
        $is_count_done = checkCountAdded($PK_APPOINTMENT_MASTER, $serviceCodeData->fields['PK_USER_MASTER'], $serviceCodeData->fields['PK_ENROLLMENT_MASTER'], $PK_ENROLLMENT_SERVICE, 'COMPLETED');
        if ($is_count_done === 0) {
            if ($serviceCodeData->fields['SESSION_COMPLETED'] > 0) {
                $ENR_SERVICE_DATA['SESSION_COMPLETED'] = $serviceCodeData->fields['SESSION_COMPLETED'] + 1;
            } else {
                $ENR_SERVICE_DATA['SESSION_COMPLETED'] = 1;
            }

            if ($ENR_SERVICE_DATA['SESSION_COMPLETED'] > $serviceCodeData->fields['NUMBER_OF_SESSION']) {
                $ENR_SERVICE_DATA['SESSION_COMPLETED'] = $serviceCodeData->fields['NUMBER_OF_SESSION'];
            }

            db_perform_account('DOA_ENROLLMENT_SERVICE', $ENR_SERVICE_DATA, 'update', " PK_ENROLLMENT_SERVICE = " . $PK_ENROLLMENT_SERVICE);
            markEnrollmentComplete($serviceCodeData->fields['PK_ENROLLMENT_MASTER']);
            markAppointmentAdhoc($PK_ENROLLMENT_SERVICE);
        }
    }*/

    //markEnrollmentComplete($serviceCodeData->fields['PK_ENROLLMENT_MASTER']);

    if ($serviceCodeData->fields['CHARGE_TYPE'] == 'Session' && $serviceCodeData->fields['NUMBER_OF_SESSION'] == $serviceCodeData->fields['SESSION_COMPLETED']) {
        copyEnrollment($serviceCodeData->fields['PK_ENROLLMENT_MASTER']);
    }
}

/*function updateSessionNotChargedCount($PK_APPOINTMENT_MASTER)
{
    global $db_account;
    $appointmentData = $db_account->Execute("SELECT `PK_ENROLLMENT_SERVICE` FROM `DOA_APPOINTMENT_MASTER` WHERE `PK_APPOINTMENT_MASTER` = ".$PK_APPOINTMENT_MASTER);
    $PK_ENROLLMENT_SERVICE = $appointmentData->fields['PK_ENROLLMENT_SERVICE'];
    $serviceCodeData = $db_account->Execute("SELECT DOA_ENROLLMENT_SERVICE.PK_ENROLLMENT_SERVICE, DOA_ENROLLMENT_SERVICE.SESSION_COMPLETED, DOA_ENROLLMENT_SERVICE.NUMBER_OF_SESSION, DOA_ENROLLMENT_MASTER.PK_ENROLLMENT_MASTER, DOA_ENROLLMENT_MASTER.PK_USER_MASTER, DOA_ENROLLMENT_MASTER.CHARGE_TYPE FROM DOA_ENROLLMENT_SERVICE JOIN DOA_ENROLLMENT_MASTER ON DOA_ENROLLMENT_MASTER.PK_ENROLLMENT_MASTER = DOA_ENROLLMENT_SERVICE.PK_ENROLLMENT_MASTER WHERE PK_ENROLLMENT_SERVICE = ".$PK_ENROLLMENT_SERVICE);
    if ($serviceCodeData->RecordCount() > 0) {
        $ENR_SERVICE_DATA['SESSION_COMPLETED'] = $serviceCodeData->fields['SESSION_COMPLETED'] - 1;
        db_perform_account('DOA_ENROLLMENT_SERVICE', $ENR_SERVICE_DATA, 'update', " PK_ENROLLMENT_SERVICE = " . $PK_ENROLLMENT_SERVICE);

        $db_account->Execute("DELETE FROM `DOA_APPOINTMENT_ENROLLMENT` WHERE `PK_APPOINTMENT_MASTER` = ".$PK_APPOINTMENT_MASTER);
    }
}*/

/*function updateSessionCreatedAndCompletedCount($PK_APPOINTMENT_MASTER)
{
    global $db_account;
    $appointmentData = $db_account->Execute("SELECT PK_ENROLLMENT_MASTER, PK_ENROLLMENT_SERVICE, APPOINTMENT_TYPE FROM `DOA_APPOINTMENT_MASTER` WHERE `PK_APPOINTMENT_MASTER` = ".$PK_APPOINTMENT_MASTER);
    $PK_ENROLLMENT_MASTER = $appointmentData->fields['PK_ENROLLMENT_MASTER'];
    $PK_ENROLLMENT_SERVICE = $appointmentData->fields['PK_ENROLLMENT_SERVICE'];

    $session_created = $db_account->Execute("SELECT COUNT(PK_APPOINTMENT_MASTER) AS SESSION_CREATED FROM `DOA_APPOINTMENT_MASTER` WHERE ((`PK_APPOINTMENT_STATUS` != 6 AND `PK_APPOINTMENT_STATUS` != 4) OR IS_CHARGED = 1) AND `PK_ENROLLMENT_SERVICE` = ".$PK_ENROLLMENT_SERVICE);
    $SESSION_CREATED_COUNT = ($session_created->RecordCount() > 0) ? $session_created->fields['SESSION_CREATED'] : 0;

    $session_completed = $db_account->Execute("SELECT COUNT(PK_APPOINTMENT_MASTER) AS SESSION_COMPLETED FROM `DOA_APPOINTMENT_MASTER` WHERE IS_CHARGED = 1 AND `PK_ENROLLMENT_SERVICE` = ".$PK_ENROLLMENT_SERVICE);
    $SESSION_COMPLETED_COUNT = ($session_completed->RecordCount() > 0) ? $session_completed->fields['SESSION_COMPLETED'] : 0;

    $ENR_SERVICE_DATA['SESSION_CREATED'] = $SESSION_CREATED_COUNT;
    $ENR_SERVICE_DATA['SESSION_COMPLETED'] = $SESSION_COMPLETED_COUNT;
    db_perform_account('DOA_ENROLLMENT_SERVICE', $ENR_SERVICE_DATA, 'update', " PK_ENROLLMENT_SERVICE = " . $PK_ENROLLMENT_SERVICE);

    if ($appointmentData->fields['APPOINTMENT_TYPE'] == 'NORMAL') {
        markAppointmentAdhoc($PK_ENROLLMENT_SERVICE);
    }
    markEnrollmentComplete($PK_ENROLLMENT_MASTER);
}*/

function getSessionCreatedCount($PK_ENROLLMENT_SERVICE, $TYPE = null)
{
    global $db_account;
    if ($TYPE == null) {
        $enrollmentServiceData = $db_account->Execute("SELECT DOA_SERVICE_CODE.IS_GROUP FROM DOA_ENROLLMENT_SERVICE JOIN DOA_SERVICE_CODE ON DOA_ENROLLMENT_SERVICE.PK_SERVICE_CODE = DOA_SERVICE_CODE.PK_SERVICE_CODE WHERE DOA_ENROLLMENT_SERVICE.PK_ENROLLMENT_SERVICE = '$PK_ENROLLMENT_SERVICE'");
        if ($enrollmentServiceData->fields['IS_GROUP'] == 1) {
            $TYPE = 'GROUP';
        } else {
            $TYPE = 'NORMAL';
        }
    }
    if ($TYPE == 'NORMAL') {
        $session_created = $db_account->Execute("SELECT SUM(DOA_SCHEDULING_CODE.UNIT) AS SESSION_CREATED FROM `DOA_APPOINTMENT_MASTER` LEFT JOIN DOA_SCHEDULING_CODE ON DOA_APPOINTMENT_MASTER.PK_SCHEDULING_CODE = DOA_SCHEDULING_CODE.PK_SCHEDULING_CODE WHERE (PK_APPOINTMENT_STATUS = 1 OR IS_CHARGED = 1) AND APPOINTMENT_TYPE = 'NORMAL' AND `PK_ENROLLMENT_SERVICE` = " . $PK_ENROLLMENT_SERVICE);
        return ($session_created->RecordCount() > 0 && $session_created->fields['SESSION_CREATED'] != NULL) ? $session_created->fields['SESSION_CREATED'] : 0;
    } elseif ($TYPE == 'GROUP') {
        $group_session_created = $db_account->Execute("SELECT SUM(DOA_SCHEDULING_CODE.UNIT) AS SESSION_CREATED FROM `DOA_APPOINTMENT_MASTER` LEFT JOIN DOA_SCHEDULING_CODE ON DOA_APPOINTMENT_MASTER.PK_SCHEDULING_CODE = DOA_SCHEDULING_CODE.PK_SCHEDULING_CODE INNER JOIN DOA_APPOINTMENT_ENROLLMENT ON DOA_APPOINTMENT_MASTER.PK_APPOINTMENT_MASTER = DOA_APPOINTMENT_ENROLLMENT.PK_APPOINTMENT_MASTER WHERE DOA_APPOINTMENT_MASTER.APPOINTMENT_TYPE = 'GROUP' AND DOA_APPOINTMENT_ENROLLMENT.PK_ENROLLMENT_SERVICE = " . $PK_ENROLLMENT_SERVICE);
        return ($group_session_created->RecordCount() > 0 && $group_session_created->fields['SESSION_CREATED'] != NULL) ? $group_session_created->fields['SESSION_CREATED'] : 0;
    } else {
        return 0;
    }
}

function getAllSessionCreatedCount($PK_ENROLLMENT_SERVICE, $TYPE = null)
{
    global $db_account;
    if ($TYPE == null) {
        $enrollmentServiceData = $db_account->Execute("SELECT DOA_SERVICE_CODE.IS_GROUP FROM DOA_ENROLLMENT_SERVICE JOIN DOA_SERVICE_CODE ON DOA_ENROLLMENT_SERVICE.PK_SERVICE_CODE = DOA_SERVICE_CODE.PK_SERVICE_CODE WHERE DOA_ENROLLMENT_SERVICE.PK_ENROLLMENT_SERVICE = '$PK_ENROLLMENT_SERVICE'");
        if ($enrollmentServiceData->fields['IS_GROUP'] == 1) {
            $TYPE = 'GROUP';
        } else {
            $TYPE = 'NORMAL';
        }
    }

    if ($TYPE == 'NORMAL') {
        $session_created = $db_account->Execute("SELECT SUM(DOA_SCHEDULING_CODE.UNIT) AS SESSION_CREATED FROM `DOA_APPOINTMENT_MASTER` LEFT JOIN DOA_SCHEDULING_CODE ON DOA_APPOINTMENT_MASTER.PK_SCHEDULING_CODE = DOA_SCHEDULING_CODE.PK_SCHEDULING_CODE WHERE PK_APPOINTMENT_STATUS != 6 AND APPOINTMENT_TYPE = 'NORMAL' AND `PK_ENROLLMENT_SERVICE` = " . $PK_ENROLLMENT_SERVICE);
        return ($session_created->RecordCount() > 0 && $session_created->fields['SESSION_CREATED'] != NULL) ? $session_created->fields['SESSION_CREATED'] : 0;
    } elseif ($TYPE == 'GROUP') {
        $group_session_created = $db_account->Execute("SELECT SUM(DOA_SCHEDULING_CODE.UNIT) AS SESSION_CREATED FROM `DOA_APPOINTMENT_MASTER` LEFT JOIN DOA_SCHEDULING_CODE ON DOA_APPOINTMENT_MASTER.PK_SCHEDULING_CODE = DOA_SCHEDULING_CODE.PK_SCHEDULING_CODE INNER JOIN DOA_APPOINTMENT_ENROLLMENT ON DOA_APPOINTMENT_MASTER.PK_APPOINTMENT_MASTER = DOA_APPOINTMENT_ENROLLMENT.PK_APPOINTMENT_MASTER WHERE DOA_APPOINTMENT_MASTER.APPOINTMENT_TYPE = 'GROUP' AND DOA_APPOINTMENT_ENROLLMENT.PK_ENROLLMENT_SERVICE = " . $PK_ENROLLMENT_SERVICE);
        return ($group_session_created->RecordCount() > 0 && $group_session_created->fields['SESSION_CREATED'] != NULL) ? $group_session_created->fields['SESSION_CREATED'] : 0;
    } else {
        return 0;
    }
}

function getSessionScheduledCount($PK_ENROLLMENT_SERVICE, $TYPE = null)
{
    global $db_account;
    if ($TYPE == null) {
        $enrollmentServiceData = $db_account->Execute("SELECT DOA_SERVICE_CODE.IS_GROUP FROM DOA_ENROLLMENT_SERVICE JOIN DOA_SERVICE_CODE ON DOA_ENROLLMENT_SERVICE.PK_SERVICE_CODE = DOA_SERVICE_CODE.PK_SERVICE_CODE WHERE DOA_ENROLLMENT_SERVICE.PK_ENROLLMENT_SERVICE = '$PK_ENROLLMENT_SERVICE'");
        if ($enrollmentServiceData->fields['IS_GROUP'] == 1) {
            $TYPE = 'GROUP';
        } else {
            $TYPE = 'NORMAL';
        }
    }

    if ($TYPE == 'NORMAL') {
        $session_created = $db_account->Execute("SELECT SUM(DOA_SCHEDULING_CODE.UNIT) AS SESSION_CREATED FROM `DOA_APPOINTMENT_MASTER` LEFT JOIN DOA_SCHEDULING_CODE ON DOA_APPOINTMENT_MASTER.PK_SCHEDULING_CODE = DOA_SCHEDULING_CODE.PK_SCHEDULING_CODE WHERE PK_APPOINTMENT_STATUS = 1 AND APPOINTMENT_TYPE = 'NORMAL' AND `PK_ENROLLMENT_SERVICE` = " . $PK_ENROLLMENT_SERVICE);
        return ($session_created->RecordCount() > 0 && $session_created->fields['SESSION_CREATED'] != NULL) ? $session_created->fields['SESSION_CREATED'] : 0;
    } elseif ($TYPE == 'GROUP') {
        $group_session_created = $db_account->Execute("SELECT SUM(DOA_SCHEDULING_CODE.UNIT) AS SESSION_CREATED FROM `DOA_APPOINTMENT_MASTER` LEFT JOIN DOA_SCHEDULING_CODE ON DOA_APPOINTMENT_MASTER.PK_SCHEDULING_CODE = DOA_SCHEDULING_CODE.PK_SCHEDULING_CODE INNER JOIN DOA_APPOINTMENT_ENROLLMENT ON DOA_APPOINTMENT_MASTER.PK_APPOINTMENT_MASTER = DOA_APPOINTMENT_ENROLLMENT.PK_APPOINTMENT_MASTER WHERE DOA_APPOINTMENT_MASTER.PK_APPOINTMENT_STATUS = 1 AND DOA_APPOINTMENT_MASTER.APPOINTMENT_TYPE = 'GROUP' AND DOA_APPOINTMENT_ENROLLMENT.PK_ENROLLMENT_SERVICE = " . $PK_ENROLLMENT_SERVICE);
        return ($group_session_created->RecordCount() > 0 && $group_session_created->fields['SESSION_CREATED'] != NULL) ? $group_session_created->fields['SESSION_CREATED'] : 0;
    } else {
        return 0;
    }
}

function getSessionCountForMigration($PK_ENROLLMENT_SERVICE, $TYPE = null)
{
    global $db_account;
    if ($TYPE == 'NORMAL') {
        $session_created = $db_account->Execute("SELECT SUM(DOA_SCHEDULING_CODE.UNIT) AS SESSION_CREATED FROM `DOA_APPOINTMENT_MASTER` LEFT JOIN DOA_SCHEDULING_CODE ON DOA_APPOINTMENT_MASTER.PK_SCHEDULING_CODE = DOA_SCHEDULING_CODE.PK_SCHEDULING_CODE WHERE PK_APPOINTMENT_STATUS IN (2, 5) AND APPOINTMENT_TYPE = 'NORMAL' AND `PK_ENROLLMENT_SERVICE` = " . $PK_ENROLLMENT_SERVICE);
        return ($session_created->RecordCount() > 0 && $session_created->fields['SESSION_CREATED'] != NULL) ? $session_created->fields['SESSION_CREATED'] : 0;
    } elseif ($TYPE == 'GROUP') {
        $group_session_created = $db_account->Execute("SELECT SUM(DOA_SCHEDULING_CODE.UNIT) AS SESSION_CREATED FROM `DOA_APPOINTMENT_MASTER` LEFT JOIN DOA_SCHEDULING_CODE ON DOA_APPOINTMENT_MASTER.PK_SCHEDULING_CODE = DOA_SCHEDULING_CODE.PK_SCHEDULING_CODE INNER JOIN DOA_APPOINTMENT_ENROLLMENT ON DOA_APPOINTMENT_MASTER.PK_APPOINTMENT_MASTER = DOA_APPOINTMENT_ENROLLMENT.PK_APPOINTMENT_MASTER WHERE DOA_APPOINTMENT_MASTER.APPOINTMENT_TYPE = 'GROUP' AND DOA_APPOINTMENT_ENROLLMENT.PK_ENROLLMENT_SERVICE = " . $PK_ENROLLMENT_SERVICE);
        return ($group_session_created->RecordCount() > 0 && $group_session_created->fields['SESSION_CREATED'] != NULL) ? $group_session_created->fields['SESSION_CREATED'] : 0;
    } else {
        return 0;
    }
}

function getPaidSessionCount($PK_ENROLLMENT_SERVICE)
{
    global $db_account;
    $enrollmentServiceData = $db_account->Execute("SELECT * FROM DOA_ENROLLMENT_SERVICE WHERE PK_ENROLLMENT_SERVICE = '$PK_ENROLLMENT_SERVICE'");
    if ($enrollmentServiceData->RecordCount() > 0) {
        if ($enrollmentServiceData->fields['PRICE_PER_SESSION'] > 0) {
            return $enrollmentServiceData->fields['TOTAL_AMOUNT_PAID'] / $enrollmentServiceData->fields['PRICE_PER_SESSION'];
        } else {
            return $enrollmentServiceData->fields['NUMBER_OF_SESSION'];
        }
    } else {
        return 0;
    }
}

function getSessionCompletedCount($PK_ENROLLMENT_SERVICE)
{
    global $db_account;
    $enrollmentServiceData = $db_account->Execute("SELECT DOA_SERVICE_CODE.IS_GROUP FROM DOA_ENROLLMENT_SERVICE JOIN DOA_SERVICE_CODE ON DOA_ENROLLMENT_SERVICE.PK_SERVICE_CODE = DOA_SERVICE_CODE.PK_SERVICE_CODE WHERE DOA_ENROLLMENT_SERVICE.PK_ENROLLMENT_SERVICE = '$PK_ENROLLMENT_SERVICE'");

    if ($enrollmentServiceData->RecordCount() > 0 && $enrollmentServiceData->fields['IS_GROUP'] == 0) {
        $session_completed = $db_account->Execute("SELECT SUM(DOA_SCHEDULING_CODE.UNIT) AS SESSION_COMPLETED FROM `DOA_APPOINTMENT_MASTER` LEFT JOIN DOA_SCHEDULING_CODE ON DOA_APPOINTMENT_MASTER.PK_SCHEDULING_CODE = DOA_SCHEDULING_CODE.PK_SCHEDULING_CODE WHERE IS_CHARGED = 1 AND APPOINTMENT_TYPE = 'NORMAL' AND `PK_ENROLLMENT_SERVICE` = " . $PK_ENROLLMENT_SERVICE);
        return ($session_completed->RecordCount() > 0 && $session_completed->fields['SESSION_COMPLETED'] != NULL) ? $session_completed->fields['SESSION_COMPLETED'] : 0;
    } elseif ($enrollmentServiceData->RecordCount() > 0 && $enrollmentServiceData->fields['IS_GROUP'] == 1) {
        $group_session_completed = $db_account->Execute("SELECT SUM(DOA_SCHEDULING_CODE.UNIT) AS SESSION_COMPLETED FROM `DOA_APPOINTMENT_MASTER` LEFT JOIN DOA_SCHEDULING_CODE ON DOA_APPOINTMENT_MASTER.PK_SCHEDULING_CODE = DOA_SCHEDULING_CODE.PK_SCHEDULING_CODE INNER JOIN DOA_APPOINTMENT_ENROLLMENT ON DOA_APPOINTMENT_MASTER.PK_APPOINTMENT_MASTER = DOA_APPOINTMENT_ENROLLMENT.PK_APPOINTMENT_MASTER WHERE DOA_APPOINTMENT_MASTER.APPOINTMENT_TYPE = 'GROUP' AND DOA_APPOINTMENT_ENROLLMENT.IS_CHARGED = 1 AND DOA_APPOINTMENT_ENROLLMENT.PK_ENROLLMENT_SERVICE = " . $PK_ENROLLMENT_SERVICE);
        return ($group_session_completed->RecordCount() > 0 && $group_session_completed->fields['SESSION_COMPLETED'] != NULL) ? $group_session_completed->fields['SESSION_COMPLETED'] : 0;
    } else {
        return 0;
    }
}

function getSessionCompletedCountOfEnrollment($PK_ENROLLMENT_MASTER)
{
    global $db_account;
    $session_completed = $db_account->Execute("SELECT SUM(DOA_SCHEDULING_CODE.UNIT) AS SESSION_COMPLETED FROM `DOA_APPOINTMENT_MASTER` LEFT JOIN DOA_SCHEDULING_CODE ON DOA_APPOINTMENT_MASTER.PK_SCHEDULING_CODE = DOA_SCHEDULING_CODE.PK_SCHEDULING_CODE WHERE IS_CHARGED = 1 AND APPOINTMENT_TYPE = 'NORMAL' AND `PK_ENROLLMENT_MASTER` = " . $PK_ENROLLMENT_MASTER);
    return ($session_completed->RecordCount() > 0 && $session_completed->fields['SESSION_COMPLETED'] != NULL) ? $session_completed->fields['SESSION_COMPLETED'] : 0;
}

function getAppointmentPosition($PK_ENROLLMENT_SERVICE, $PK_APPOINTMENT_MASTER)
{
    global $db_account;
    $appointment_position = $db_account->Execute("SELECT position FROM (SELECT PK_APPOINTMENT_MASTER, ROW_NUMBER() OVER (PARTITION BY PK_ENROLLMENT_SERVICE ORDER BY DATE ASC, START_TIME ASC) AS position FROM DOA_APPOINTMENT_MASTER WHERE PK_ENROLLMENT_SERVICE = '$PK_ENROLLMENT_SERVICE' AND PK_APPOINTMENT_STATUS NOT IN (6,4)) ranked WHERE PK_APPOINTMENT_MASTER = '$PK_APPOINTMENT_MASTER'");

    if ($appointment_position->RecordCount() > 0) {
        return $appointment_position->fields['position'];
    } else {
        return 0;
    }
}

function rearrangeSerialNumber($PK_USER_MASTER)
{
    global $db_account;
    $SL_NO = 1;

    $db_account->Execute("UPDATE DOA_APPOINTMENT_MASTER INNER JOIN DOA_APPOINTMENT_CUSTOMER ON DOA_APPOINTMENT_MASTER.PK_APPOINTMENT_MASTER = DOA_APPOINTMENT_CUSTOMER.PK_APPOINTMENT_MASTER SET DOA_APPOINTMENT_MASTER.SERIAL_NUMBER = 0 WHERE DOA_APPOINTMENT_CUSTOMER.PK_USER_MASTER = '$PK_USER_MASTER'");
    $appointment_data = $db_account->Execute("SELECT DOA_APPOINTMENT_MASTER.PK_APPOINTMENT_MASTER FROM DOA_APPOINTMENT_MASTER INNER JOIN DOA_APPOINTMENT_CUSTOMER ON DOA_APPOINTMENT_MASTER.PK_APPOINTMENT_MASTER = DOA_APPOINTMENT_CUSTOMER.PK_APPOINTMENT_MASTER WHERE DOA_APPOINTMENT_MASTER.PK_APPOINTMENT_STATUS IN (1, 2, 3, 5, 7, 8) AND DOA_APPOINTMENT_MASTER.STATUS = 'A' AND DOA_APPOINTMENT_MASTER.APPOINTMENT_TYPE IN ('NORMAL', 'AD-HOC') AND DOA_APPOINTMENT_CUSTOMER.PK_USER_MASTER = '$PK_USER_MASTER' ORDER BY DOA_APPOINTMENT_MASTER.DATE ASC, DOA_APPOINTMENT_MASTER.START_TIME ASC");
    while (!$appointment_data->EOF) {
        $PK_APPOINTMENT_MASTER = $appointment_data->fields['PK_APPOINTMENT_MASTER'];
        $db_account->Execute("UPDATE DOA_APPOINTMENT_MASTER SET SERIAL_NUMBER = '$SL_NO' WHERE PK_APPOINTMENT_MASTER = '$PK_APPOINTMENT_MASTER'");
        $SL_NO++;
        $appointment_data->MoveNext();
    }
}

function getPaidCount($PK_ENROLLMENT_SERVICE)
{
    global $db_account;
    $paid_count = $db_account->Execute("SELECT `TOTAL_AMOUNT_PAID`,`PRICE_PER_SESSION` FROM `DOA_ENROLLMENT_SERVICE` WHERE `PK_ENROLLMENT_SERVICE` = " . $PK_ENROLLMENT_SERVICE);
    if ($paid_count->RecordCount() > 0) {
        $total_amount_paid = $paid_count->fields['TOTAL_AMOUNT_PAID'];
        $price_per_session = $paid_count->fields['PRICE_PER_SESSION'];
        if ($total_amount_paid > 0 && $price_per_session > 0) {
            return number_format($total_amount_paid / $price_per_session, 2);
        } else {
            return 0;
        }
    } else {
        return 0;
    }
}

function copyEnrollment($PK_ENROLLMENT_MASTER)
{
    require_once("stripe-php-master/init.php");
    global $db;
    global $db_account;
    global $master_database;
    global $account_database;

    $enrollment_data = $db_account->Execute("SELECT * FROM DOA_ENROLLMENT_MASTER WHERE PK_ENROLLMENT_MASTER=" . $PK_ENROLLMENT_MASTER);
    if ($enrollment_data->RecordCount() > 0) {
        $ENROLLMENT_MASTER_DATA['PK_ENROLLMENT_TYPE '] = 0;
        $ENROLLMENT_MASTER_DATA['ENROLLMENT_NAME'] = $enrollment_data->fields['ENROLLMENT_NAME'];
        $ENROLLMENT_MASTER_DATA['PK_USER_MASTER'] = $enrollment_data->fields['PK_USER_MASTER'];
        $ENROLLMENT_MASTER_DATA['PK_LOCATION'] = $enrollment_data->fields['PK_LOCATION'];
        $ENROLLMENT_MASTER_DATA['PK_PACKAGE'] = $enrollment_data->fields['PK_PACKAGE'];
        $ENROLLMENT_MASTER_DATA['CHARGE_TYPE'] = $enrollment_data->fields['CHARGE_TYPE'];
        $ENROLLMENT_MASTER_DATA['PK_AGREEMENT_TYPE'] = $enrollment_data->fields['PK_AGREEMENT_TYPE'];
        $ENROLLMENT_MASTER_DATA['PK_DOCUMENT_LIBRARY'] = $enrollment_data->fields['PK_DOCUMENT_LIBRARY'];
        $ENROLLMENT_MASTER_DATA['AGREEMENT_PDF_LINK'] = $enrollment_data->fields['AGREEMENT_PDF_LINK'];
        $ENROLLMENT_MASTER_DATA['ENROLLMENT_BY_ID'] = $enrollment_data->fields['ENROLLMENT_BY_ID'];
        $ENROLLMENT_MASTER_DATA['ENROLLMENT_BY_PERCENTAGE'] = $enrollment_data->fields['ENROLLMENT_BY_PERCENTAGE'];
        $ENROLLMENT_MASTER_DATA['MEMO'] = $enrollment_data->fields['MEMO'];
        $ENROLLMENT_MASTER_DATA['STATUS'] = 'A';
        $ENROLLMENT_MASTER_DATA['ENROLLMENT_DATE']  = date("Y-m-d");
        $service_data = $db_account->Execute("SELECT * FROM DOA_ENROLLMENT_SERVICE WHERE PK_ENROLLMENT_MASTER=" . $PK_ENROLLMENT_MASTER);
        $account_data = $db->Execute("SELECT ENROLLMENT_ID_CHAR, ENROLLMENT_ID_NUM, MISCELLANEOUS_ID_CHAR, MISCELLANEOUS_ID_NUM FROM `DOA_ACCOUNT_MASTER` WHERE `PK_ACCOUNT_MASTER` = '$_SESSION[PK_ACCOUNT_MASTER]'");
        $misc_service_data = $db_account->Execute("SELECT * FROM DOA_SERVICE_MASTER WHERE PK_SERVICE_CLASS = 5 AND PK_SERVICE_MASTER = " . $service_data->fields['PK_SERVICE_MASTER']);
        if ($misc_service_data->RecordCount() > 0) {
            $id_data = $db_account->Execute("SELECT MISC_ID FROM `DOA_ENROLLMENT_MASTER` WHERE ENROLLMENT_ID IS NULL AND PK_USER_MASTER = " . $enrollment_data->fields['PK_USER_MASTER'] . " ORDER BY PK_ENROLLMENT_MASTER DESC LIMIT 1");
            if ($id_data->fields['MISC_ID'] != ' ') {
                $misc_id = explode("-", $id_data->fields['MISC_ID']);
                $last_misc_id = $misc_id[1];
                $ENROLLMENT_MASTER_DATA['MISC_ID'] = $account_data->fields['MISCELLANEOUS_ID_CHAR'] . "-" . (intval($last_misc_id) + 1);
            } else {
                $ENROLLMENT_MASTER_DATA['MISC_ID'] = $account_data->fields['MISCELLANEOUS_ID_CHAR'] . "-" . $account_data->fields['MISCELLANEOUS_ID_NUM'];
            }
        } else {
            $id_data = $db_account->Execute("SELECT ENROLLMENT_ID FROM `DOA_ENROLLMENT_MASTER` WHERE MISC_ID IS NULL AND PK_USER_MASTER = " . $enrollment_data->fields['PK_USER_MASTER'] . " ORDER BY PK_ENROLLMENT_MASTER DESC LIMIT 1");
            if ($id_data->fields['ENROLLMENT_ID'] != ' ') {
                $enrollment_id = explode("-", $id_data->fields['ENROLLMENT_ID']);
                $last_enrollment_id = $enrollment_id[1];
                $ENROLLMENT_MASTER_DATA['ENROLLMENT_ID'] = $account_data->fields['ENROLLMENT_ID_CHAR'] . "-" . (intval($last_enrollment_id) + 1);
            } else {
                $ENROLLMENT_MASTER_DATA['ENROLLMENT_ID'] = $account_data->fields['ENROLLMENT_ID_CHAR'] . "-" . $account_data->fields['ENROLLMENT_ID_NUM'];
            }
        }

        $customer_enrollment_number = $db_account->Execute("SELECT CUSTOMER_ENROLLMENT_NUMBER FROM `DOA_ENROLLMENT_MASTER` WHERE PK_USER_MASTER = " . $enrollment_data->fields['PK_USER_MASTER'] . " ORDER BY PK_ENROLLMENT_MASTER DESC LIMIT 1");
        if ($customer_enrollment_number->RecordCount() > 0) {
            $ENROLLMENT_MASTER_DATA['CUSTOMER_ENROLLMENT_NUMBER'] = $customer_enrollment_number->fields['CUSTOMER_ENROLLMENT_NUMBER'] + 1;
        } else {
            $ENROLLMENT_MASTER_DATA['CUSTOMER_ENROLLMENT_NUMBER'] = 1;
        }

        $ENROLLMENT_MASTER_DATA['ACTIVE'] = 1;
        $ENROLLMENT_MASTER_DATA['CREATED_BY']  = $_SESSION['PK_USER'];
        $ENROLLMENT_MASTER_DATA['CREATED_ON']  = date("Y-m-d H:i");
        db_perform_account('DOA_ENROLLMENT_MASTER', $ENROLLMENT_MASTER_DATA, 'insert');
        $PK_ENROLLMENT_MASTER_NEW = $db_account->insert_ID();

        $billing_data = $db_account->Execute("SELECT * FROM DOA_ENROLLMENT_BILLING WHERE PK_ENROLLMENT_MASTER=" . $PK_ENROLLMENT_MASTER);
        $ENROLLMENT_BILLING_DATA['PK_ENROLLMENT_MASTER'] = $PK_ENROLLMENT_MASTER_NEW;
        $ENROLLMENT_BILLING_DATA['BILLING_REF'] = $billing_data->fields['BILLING_REF'];
        $ENROLLMENT_BILLING_DATA['BILLING_DATE'] = $billing_data->fields['BILLING_DATE'];
        $ENROLLMENT_BILLING_DATA['DOWN_PAYMENT'] = $billing_data->fields['DOWN_PAYMENT'];
        $ENROLLMENT_BILLING_DATA['BALANCE_PAYABLE'] = $billing_data->fields['BALANCE_PAYABLE'];
        $ENROLLMENT_BILLING_DATA['TOTAL_AMOUNT'] = $billing_data->fields['TOTAL_AMOUNT'];
        $ENROLLMENT_BILLING_DATA['PAYMENT_METHOD'] = $billing_data->fields['PAYMENT_METHOD'];
        $ENROLLMENT_BILLING_DATA['PAYMENT_TERM'] = $billing_data->fields['PAYMENT_TERM'];
        $ENROLLMENT_BILLING_DATA['NUMBER_OF_PAYMENT'] = $billing_data->fields['NUMBER_OF_PAYMENT'];
        $ENROLLMENT_BILLING_DATA['FIRST_DUE_DATE'] = $billing_data->fields['FIRST_DUE_DATE'];
        $ENROLLMENT_BILLING_DATA['INSTALLMENT_AMOUNT'] = $billing_data->fields['INSTALLMENT_AMOUNT'];
        db_perform_account('DOA_ENROLLMENT_BILLING', $ENROLLMENT_BILLING_DATA, 'insert');
        $PK_ENROLLMENT_BILLING_NEW = $db_account->insert_ID();

        $ENROLLMENT_SERVICE_DATA['PK_ENROLLMENT_MASTER'] = $PK_ENROLLMENT_MASTER_NEW;
        $ENROLLMENT_SERVICE_DATA['PK_SERVICE_MASTER'] = $service_data->fields['PK_SERVICE_MASTER'];
        $ENROLLMENT_SERVICE_DATA['PK_SERVICE_CODE'] = $service_data->fields['PK_SERVICE_CODE'];
        $ENROLLMENT_SERVICE_DATA['SERVICE_DETAILS'] = $service_data->fields['SERVICE_DETAILS'];
        $ENROLLMENT_SERVICE_DATA['NUMBER_OF_SESSION'] = $service_data->fields['NUMBER_OF_SESSION'];
        $ENROLLMENT_SERVICE_DATA['PRICE_PER_SESSION'] = $service_data->fields['PRICE_PER_SESSION'];
        $ENROLLMENT_SERVICE_DATA['TOTAL'] = $service_data->fields['TOTAL'];
        $ENROLLMENT_SERVICE_DATA['TOTAL_AMOUNT_PAID'] = $service_data->fields['TOTAL_AMOUNT_PAID'];
        $ENROLLMENT_SERVICE_DATA['DISCOUNT_TYPE'] = $service_data->fields['DISCOUNT_TYPE'];
        $ENROLLMENT_SERVICE_DATA['DISCOUNT'] = $service_data->fields['DISCOUNT'];
        $ENROLLMENT_SERVICE_DATA['FINAL_AMOUNT'] = $service_data->fields['FINAL_AMOUNT'];
        $ENROLLMENT_SERVICE_DATA['STATUS'] = 'A';
        db_perform_account('DOA_ENROLLMENT_SERVICE', $ENROLLMENT_SERVICE_DATA, 'insert');

        $ledger_data = $db_account->Execute("SELECT * FROM DOA_ENROLLMENT_LEDGER WHERE TRANSACTION_TYPE='Billing' AND PK_ENROLLMENT_MASTER=" . $PK_ENROLLMENT_MASTER);
        $ENROLLMENT_LEDGER_DATA['PK_ENROLLMENT_MASTER'] = $PK_ENROLLMENT_MASTER_NEW;
        $ENROLLMENT_LEDGER_DATA['PK_ENROLLMENT_BILLING '] = $PK_ENROLLMENT_BILLING_NEW;
        $ENROLLMENT_LEDGER_DATA['TRANSACTION_TYPE'] = 'Billing';
        $ENROLLMENT_LEDGER_DATA['ENROLLMENT_LEDGER_PARENT '] = 0;
        $ENROLLMENT_LEDGER_DATA['DUE_DATE'] = $ledger_data->fields['DUE_DATE'];
        $ENROLLMENT_LEDGER_DATA['BILLED_AMOUNT'] = $ledger_data->fields['BILLED_AMOUNT'];
        $ENROLLMENT_LEDGER_DATA['PAID_AMOUNT'] = $ledger_data->fields['PAID_AMOUNT'];
        $ENROLLMENT_LEDGER_DATA['BALANCE'] = $ledger_data->fields['BALANCE'];
        $ENROLLMENT_LEDGER_DATA['IS_PAID'] = 1;
        $ENROLLMENT_LEDGER_DATA['IS_DOWN_PAYMENT'] = 0;
        $ENROLLMENT_LEDGER_DATA['STATUS'] = 'A';
        db_perform_account('DOA_ENROLLMENT_LEDGER', $ENROLLMENT_LEDGER_DATA, 'insert');
        $ENROLLMENT_LEDGER_PARENT = $db_account->insert_ID();

        $RECEIPT_NUMBER = generateReceiptNumber($PK_ENROLLMENT_MASTER_NEW);
        try {
            $account_data = $db->Execute("SELECT * FROM `DOA_ACCOUNT_MASTER` WHERE `PK_ACCOUNT_MASTER` = '$_SESSION[PK_ACCOUNT_MASTER]'");
            $SECRET_KEY = $account_data->fields['SECRET_KEY'];

            $customer_payment_info = $db_account->Execute("SELECT DOA_CUSTOMER_PAYMENT_INFO.CUSTOMER_PAYMENT_ID FROM DOA_CUSTOMER_PAYMENT_INFO INNER JOIN $master_database.DOA_USER_MASTER AS DOA_USER_MASTER ON DOA_USER_MASTER.PK_USER = DOA_CUSTOMER_PAYMENT_INFO.PK_USER WHERE DOA_CUSTOMER_PAYMENT_INFO.PAYMENT_TYPE = 'Stripe' AND DOA_USER_MASTER.PK_USER_MASTER = " . $enrollment_data->fields['PK_USER_MASTER']);
            Stripe::setApiKey($SECRET_KEY);
            $charge = \Stripe\Charge::create(array(
                "amount" => $ledger_data->fields['BILLED_AMOUNT'] * 100,
                "currency" => "usd",
                "description" => "Receipt# " . $RECEIPT_NUMBER,
                "customer" => $customer_payment_info->fields['CUSTOMER_PAYMENT_ID'],
                "statement_descriptor" => "Receipt# " . $RECEIPT_NUMBER,
            ));

            $LAST4 = $charge->payment_method_details->card->last4;

            if ($charge->paid == 1) {
                $PAYMENT_STATUS = 'Success';
                $PAYMENT_INFO_ARRAY = ['CHARGE_ID' => $charge->id, 'LAST4' => $LAST4];
                $PAYMENT_INFO = json_encode($PAYMENT_INFO_ARRAY);
            } else {
                $PAYMENT_STATUS = 'Failed';
                $PAYMENT_INFO = $charge->failure_message;
            }
        } catch (Exception $e) {
            $PAYMENT_STATUS = 'Failed';
            $PAYMENT_INFO = $e->getMessage();
        }

        $LEDGER_DATA_PAYMENT['TRANSACTION_TYPE'] = 'Payment';
        $LEDGER_DATA_PAYMENT['ENROLLMENT_LEDGER_PARENT'] = $ENROLLMENT_LEDGER_PARENT;
        $LEDGER_DATA_PAYMENT['PK_ENROLLMENT_MASTER'] = $PK_ENROLLMENT_MASTER_NEW;
        $LEDGER_DATA_PAYMENT['PK_ENROLLMENT_BILLING'] = $PK_ENROLLMENT_BILLING_NEW;
        $LEDGER_DATA_PAYMENT['DUE_DATE'] = date('Y-m-d');
        $LEDGER_DATA_PAYMENT['BILLED_AMOUNT'] = 0.00;
        $LEDGER_DATA_PAYMENT['PAID_AMOUNT'] = $ledger_data->fields['BILLED_AMOUNT'];
        $LEDGER_DATA_PAYMENT['BALANCE'] = 0.00;
        $LEDGER_DATA_PAYMENT['IS_PAID'] = 1;
        $LEDGER_DATA_PAYMENT['STATUS'] = 'A';
        db_perform_account('DOA_ENROLLMENT_LEDGER', $LEDGER_DATA_PAYMENT, 'insert');
        $PK_ENROLLMENT_LEDGER = $db_account->insert_ID();

        $PAYMENT_DATA['PK_ENROLLMENT_MASTER'] = $PK_ENROLLMENT_MASTER_NEW;
        $PAYMENT_DATA['PK_ENROLLMENT_BILLING'] = $PK_ENROLLMENT_BILLING_NEW;
        $PAYMENT_DATA['PK_PAYMENT_TYPE'] = 1;
        $PAYMENT_DATA['AMOUNT'] = $ledger_data->fields['BILLED_AMOUNT'];
        $PAYMENT_DATA['PK_ENROLLMENT_LEDGER'] = $PK_ENROLLMENT_LEDGER;
        $TYPE = 'Payment';
        $PAYMENT_DATA['TYPE'] = $TYPE;
        $PAYMENT_DATA['NOTE'] = null;
        $PAYMENT_DATA['PAYMENT_DATE'] = date('Y-m-d');
        $PAYMENT_DATA['PAYMENT_INFO'] = $PAYMENT_INFO;
        $PAYMENT_DATA['PAYMENT_STATUS'] = $PAYMENT_STATUS;
        $PAYMENT_DATA['RECEIPT_NUMBER'] = $RECEIPT_NUMBER;
        $PAYMENT_DATA['IS_ORIGINAL_RECEIPT'] = 1;
        db_perform_account('DOA_ENROLLMENT_PAYMENT', $PAYMENT_DATA, 'insert');
    }
}

function updateSessionCreatedCountByStatus($PK_APPOINTMENT_MASTER)
{
    global $db_account;
    $appointmentData = $db_account->Execute("SELECT `PK_ENROLLMENT_SERVICE` FROM `DOA_APPOINTMENT_MASTER` WHERE `PK_APPOINTMENT_MASTER` = " . $PK_APPOINTMENT_MASTER);
    $PK_ENROLLMENT_SERVICE = $appointmentData->fields['PK_ENROLLMENT_SERVICE'];
    $serviceCodeData = $db_account->Execute("SELECT PK_ENROLLMENT_SERVICE, SESSION_CREATED FROM DOA_ENROLLMENT_SERVICE WHERE PK_ENROLLMENT_SERVICE = " . $PK_ENROLLMENT_SERVICE);
    if ($serviceCodeData->RecordCount() > 0) {
        $ENR_SERVICE_DATA['SESSION_CREATED'] = $serviceCodeData->fields['SESSION_CREATED'] - 1;
    }
    db_perform_account('DOA_ENROLLMENT_SERVICE', $ENR_SERVICE_DATA, 'update', " PK_ENROLLMENT_SERVICE = " . $PK_ENROLLMENT_SERVICE);
}

function updateSessionCreatedCountGroupClass($PK_APPOINTMENT_MASTER, $PK_USER_MASTER): void
{
    global $db_account;
    $appointmentEnrData = $db_account->Execute("SELECT * FROM DOA_APPOINTMENT_ENROLLMENT WHERE PK_APPOINTMENT_MASTER = $PK_APPOINTMENT_MASTER AND PK_USER_MASTER = '$PK_USER_MASTER'");
    if ($appointmentEnrData->RecordCount() > 0) {
        $PK_ENROLLMENT_MASTER = $appointmentEnrData->fields['PK_ENROLLMENT_MASTER'];
        $PK_ENROLLMENT_SERVICE = $appointmentEnrData->fields['PK_ENROLLMENT_SERVICE'];
        $SESSION_CREATED_COUNT = getAllSessionCreatedCount($PK_ENROLLMENT_SERVICE, 'GROUP');
    } else {
        $appointmentData = $db_account->Execute("SELECT `PK_SERVICE_MASTER`, `PK_SERVICE_CODE` FROM `DOA_APPOINTMENT_MASTER` WHERE `PK_APPOINTMENT_MASTER` = " . $PK_APPOINTMENT_MASTER);
        $PK_SERVICE_MASTER = $appointmentData->fields['PK_SERVICE_MASTER'];
        $PK_SERVICE_CODE = $appointmentData->fields['PK_SERVICE_CODE'];
        [$PK_ENROLLMENT_MASTER, $PK_ENROLLMENT_SERVICE, $SESSION_CREATED_COUNT] = getEnrollmentForGroupClass($PK_USER_MASTER, $PK_SERVICE_MASTER, $PK_SERVICE_CODE, 0);
    }

    $is_count_done = checkCountAdded($PK_APPOINTMENT_MASTER, $PK_USER_MASTER, $PK_ENROLLMENT_MASTER, $PK_ENROLLMENT_SERVICE, 'CREATED', 0);

    if ($is_count_done === 0) {
        if ($SESSION_CREATED_COUNT > 0) {
            $ENR_SERVICE_DATA['SESSION_CREATED'] = $SESSION_CREATED_COUNT + 1;
        } else {
            $ENR_SERVICE_DATA['SESSION_CREATED'] = 1;
        }
        db_perform_account('DOA_ENROLLMENT_SERVICE', $ENR_SERVICE_DATA, 'update', " PK_ENROLLMENT_SERVICE = " . $PK_ENROLLMENT_SERVICE);
    }
    markEnrollmentComplete($PK_ENROLLMENT_MASTER);
}


function updateSessionCompletedCountGroupClass($PK_APPOINTMENT_MASTER, $PK_USER_MASTER): void
{
    global $db_account;
    $appointmentEnrData = $db_account->Execute("SELECT * FROM DOA_APPOINTMENT_ENROLLMENT WHERE PK_APPOINTMENT_MASTER = $PK_APPOINTMENT_MASTER AND PK_USER_MASTER = '$PK_USER_MASTER'");
    if ($appointmentEnrData->RecordCount() > 0) {
        $PK_ENROLLMENT_MASTER = $appointmentEnrData->fields['PK_ENROLLMENT_MASTER'];
        $PK_ENROLLMENT_SERVICE = $appointmentEnrData->fields['PK_ENROLLMENT_SERVICE'];
        $SESSION_CREATED_COUNT = getAllSessionCreatedCount($PK_ENROLLMENT_SERVICE, 'GROUP');
    } else {
        $appointmentData = $db_account->Execute("SELECT `PK_SERVICE_MASTER`, `PK_SERVICE_CODE`, `APPOINTMENT_TYPE` FROM `DOA_APPOINTMENT_MASTER` WHERE `PK_APPOINTMENT_MASTER` = " . $PK_APPOINTMENT_MASTER);
        $PK_SERVICE_MASTER = $appointmentData->fields['PK_SERVICE_MASTER'];
        $PK_SERVICE_CODE = $appointmentData->fields['PK_SERVICE_CODE'];
        [$PK_ENROLLMENT_MASTER, $PK_ENROLLMENT_SERVICE, $SESSION_CREATED_COUNT] = getEnrollmentForGroupClass($PK_USER_MASTER, $PK_SERVICE_MASTER, $PK_SERVICE_CODE, 0);
    }

    $is_count_done = checkCountAdded($PK_APPOINTMENT_MASTER, $PK_USER_MASTER, $PK_ENROLLMENT_MASTER, $PK_ENROLLMENT_SERVICE, 'COMPLETED', 1);

    if ($is_count_done === 0) {
        if ($SESSION_CREATED_COUNT > 0) {
            $ENR_SERVICE_DATA['SESSION_COMPLETED'] = $SESSION_CREATED_COUNT + 1;
        } else {
            $ENR_SERVICE_DATA['SESSION_COMPLETED'] = 1;
        }
        db_perform_account('DOA_ENROLLMENT_SERVICE', $ENR_SERVICE_DATA, 'update', " PK_ENROLLMENT_SERVICE = " . $PK_ENROLLMENT_SERVICE);
    }
    markEnrollmentComplete($PK_ENROLLMENT_MASTER);
}

function getEnrollmentForGroupClass($PK_USER_MASTER, $PK_SERVICE_MASTER, $PK_SERVICE_CODE, $PK_ENROLLMENT_SERVICE): array
{
    global $db_account;
    $serviceCodeData = $db_account->Execute("SELECT PK_ENROLLMENT_SERVICE, NUMBER_OF_SESSION, DOA_ENROLLMENT_MASTER.PK_ENROLLMENT_MASTER FROM DOA_ENROLLMENT_SERVICE LEFT JOIN DOA_ENROLLMENT_MASTER ON DOA_ENROLLMENT_MASTER.PK_ENROLLMENT_MASTER = DOA_ENROLLMENT_SERVICE.PK_ENROLLMENT_MASTER WHERE DOA_ENROLLMENT_SERVICE.PK_ENROLLMENT_SERVICE > $PK_ENROLLMENT_SERVICE AND DOA_ENROLLMENT_MASTER.STATUS = 'A' AND DOA_ENROLLMENT_MASTER.PK_USER_MASTER = $PK_USER_MASTER AND DOA_ENROLLMENT_SERVICE.PK_SERVICE_MASTER = $PK_SERVICE_MASTER AND DOA_ENROLLMENT_SERVICE.PK_SERVICE_CODE = $PK_SERVICE_CODE ORDER BY PK_ENROLLMENT_SERVICE ASC LIMIT 1");
    if ($serviceCodeData->RecordCount() > 0) {
        $enrollment_data = $db_account->Execute("SELECT CHARGE_TYPE FROM `DOA_ENROLLMENT_MASTER` WHERE PK_ENROLLMENT_MASTER = " . $serviceCodeData->fields['PK_ENROLLMENT_MASTER']);
        if ($enrollment_data->fields['CHARGE_TYPE'] == 'Membership') {
            $NUMBER_OF_SESSION = 99;
        } else {
            $NUMBER_OF_SESSION = $serviceCodeData->fields['NUMBER_OF_SESSION'];
        }
        $NEW_PK_ENROLLMENT_SERVICE = $serviceCodeData->fields['PK_ENROLLMENT_SERVICE'];
        $SESSION_CREATED_COUNT = getAllSessionCreatedCount($NEW_PK_ENROLLMENT_SERVICE, 'GROUP');

        if ($SESSION_CREATED_COUNT >= $NUMBER_OF_SESSION) {
            return getEnrollmentForGroupClass($PK_USER_MASTER, $PK_SERVICE_MASTER, $PK_SERVICE_CODE, $NEW_PK_ENROLLMENT_SERVICE);
        } else {
            return [$serviceCodeData->fields['PK_ENROLLMENT_MASTER'], $NEW_PK_ENROLLMENT_SERVICE, $SESSION_CREATED_COUNT];
        }
    } else {
        return [0, 0, 0];
    }
}

function checkCountAdded($PK_APPOINTMENT_MASTER, $PK_USER_MASTER, $PK_ENROLLMENT_MASTER, $PK_ENROLLMENT_SERVICE, $TYPE, $IS_CHARGED): int
{
    global $db_account;
    $count_data = $db_account->Execute("SELECT * FROM DOA_APPOINTMENT_ENROLLMENT WHERE PK_APPOINTMENT_MASTER = $PK_APPOINTMENT_MASTER AND PK_USER_MASTER = $PK_USER_MASTER AND PK_ENROLLMENT_SERVICE = '$PK_ENROLLMENT_SERVICE'");
    if ($count_data->RecordCount() > 0) {
        $APPOINTMENT_ENROLLMENT_DATA['IS_CHARGED'] = $IS_CHARGED;
        db_perform_account('DOA_APPOINTMENT_ENROLLMENT', $APPOINTMENT_ENROLLMENT_DATA, 'update', ' PK_APPOINTMENT_ENROLLMENT = ' . $count_data->fields['PK_APPOINTMENT_ENROLLMENT']);
        return 1;
    } else {
        $APPOINTMENT_ENROLLMENT_DATA['PK_APPOINTMENT_MASTER'] = $PK_APPOINTMENT_MASTER;
        $APPOINTMENT_ENROLLMENT_DATA['PK_USER_MASTER'] = $PK_USER_MASTER;
        $APPOINTMENT_ENROLLMENT_DATA['PK_ENROLLMENT_MASTER'] = $PK_ENROLLMENT_MASTER;
        $APPOINTMENT_ENROLLMENT_DATA['PK_ENROLLMENT_SERVICE'] = $PK_ENROLLMENT_SERVICE;
        //$APPOINTMENT_ENROLLMENT_DATA['TYPE'] = $TYPE;
        $APPOINTMENT_ENROLLMENT_DATA['IS_CHARGED'] = $IS_CHARGED;
        db_perform_account('DOA_APPOINTMENT_ENROLLMENT', $APPOINTMENT_ENROLLMENT_DATA, 'insert');
        return 0;
    }
}

function markEnrollmentComplete($PK_ENROLLMENT_MASTER): void
{
    global $db_account;
    $enrollment_data = $db_account->Execute("SELECT ENROLLMENT_DATE FROM DOA_ENROLLMENT_MASTER WHERE PK_ENROLLMENT_MASTER=" . $PK_ENROLLMENT_MASTER);
    if ($enrollment_data->RecordCount() > 0 && $enrollment_data->fields['ENROLLMENT_DATE'] > '2021-12-31') {
        $enrollment_total_count = $db_account->Execute("SELECT SUM(`NUMBER_OF_SESSION`) AS TOTAL_SESSION FROM `DOA_ENROLLMENT_SERVICE` WHERE `PK_ENROLLMENT_MASTER` = '$PK_ENROLLMENT_MASTER'");

        $TOTAL_COMPLETED_SESSION = 0;
        $enrollmentServiceData = $db_account->Execute("SELECT PK_ENROLLMENT_SERVICE FROM `DOA_ENROLLMENT_SERVICE` WHERE `PK_ENROLLMENT_MASTER` = '$PK_ENROLLMENT_MASTER'");
        while (!$enrollmentServiceData->EOF) {
            $SESSION_COMPLETED_COUNT = getSessionCompletedCount($enrollmentServiceData->fields['PK_ENROLLMENT_SERVICE']);
            $TOTAL_COMPLETED_SESSION += $SESSION_COMPLETED_COUNT;
            $enrollmentServiceData->MoveNext();
        }

        $enr_total_amount = $db_account->Execute("SELECT SUM(FINAL_AMOUNT) AS TOTAL_AMOUNT FROM DOA_ENROLLMENT_SERVICE WHERE PK_ENROLLMENT_MASTER = " . $PK_ENROLLMENT_MASTER);
        $enr_paid_amount = $db_account->Execute("SELECT SUM(AMOUNT) AS TOTAL_PAID_AMOUNT FROM DOA_ENROLLMENT_PAYMENT WHERE (TYPE = 'Payment' OR TYPE = 'Adjustment') AND IS_REFUNDED = 0 AND PK_ENROLLMENT_MASTER = " . $PK_ENROLLMENT_MASTER);

        $paid_count = (($enr_total_amount->fields['TOTAL_AMOUNT'] == 0) || ($enr_paid_amount->fields['TOTAL_PAID_AMOUNT'] >= $enr_total_amount->fields['TOTAL_AMOUNT'])) ? 0 : 1;

        $enr_data = $db_account->Execute("SELECT STATUS, CHARGE_TYPE FROM DOA_ENROLLMENT_MASTER WHERE PK_ENROLLMENT_MASTER = " . $PK_ENROLLMENT_MASTER);
        if (($enr_data->fields['STATUS'] == 'C' || $enr_data->fields['STATUS'] == 'CA') && $enr_data->fields['CHARGE_TYPE'] != 'Membership') {
            if (($enrollment_total_count->fields['TOTAL_SESSION'] <= $TOTAL_COMPLETED_SESSION) && ($paid_count === 0)) {
                $ENR_UPDATE_DATA['ALL_APPOINTMENT_DONE'] = 1;
                $ENR_UPDATE_DATA['STATUS'] = 'C';
                $ENR_UPDATE_DATA['IS_SALE'] = NULL;
            } elseif ($enrollment_total_count->fields['TOTAL_SESSION'] <= $TOTAL_COMPLETED_SESSION) {
                $ENR_UPDATE_DATA['ALL_APPOINTMENT_DONE'] = 1;
                $ENR_UPDATE_DATA['STATUS'] = 'CA';
            } else {
                $ENR_UPDATE_DATA['ALL_APPOINTMENT_DONE'] = 0;
                $ENR_UPDATE_DATA['STATUS'] = 'CA';
            }
            db_perform_account('DOA_ENROLLMENT_MASTER', $ENR_UPDATE_DATA, 'update', " PK_ENROLLMENT_MASTER =  '$PK_ENROLLMENT_MASTER'");
            db_perform_account('DOA_ENROLLMENT_SERVICE', ['STATUS' => $ENR_UPDATE_DATA['STATUS']], 'update', " PK_ENROLLMENT_MASTER =  '$PK_ENROLLMENT_MASTER'");
            db_perform_account('DOA_ENROLLMENT_LEDGER', ['STATUS' => $ENR_UPDATE_DATA['STATUS']], 'update', " PK_ENROLLMENT_MASTER =  '$PK_ENROLLMENT_MASTER'");
        } elseif ($enr_data->fields['CHARGE_TYPE'] != 'Membership') {
            if (($enrollment_total_count->fields['TOTAL_SESSION'] <= $TOTAL_COMPLETED_SESSION) && ($paid_count === 0)) {
                $ENR_UPDATE_DATA['ALL_APPOINTMENT_DONE'] = 1;
                $ENR_UPDATE_DATA['STATUS'] = 'CO';
                $ENR_UPDATE_DATA['IS_SALE'] = 'N';
            } elseif ($enrollment_total_count->fields['TOTAL_SESSION'] <= $TOTAL_COMPLETED_SESSION) {
                $ENR_UPDATE_DATA['ALL_APPOINTMENT_DONE'] = 1;
                $ENR_UPDATE_DATA['STATUS'] = 'A';
            } else {
                $ENR_UPDATE_DATA['ALL_APPOINTMENT_DONE'] = 0;
                $ENR_UPDATE_DATA['STATUS'] = 'A';
            }
            db_perform_account('DOA_ENROLLMENT_MASTER', $ENR_UPDATE_DATA, 'update', " PK_ENROLLMENT_MASTER =  '$PK_ENROLLMENT_MASTER'");
            db_perform_account('DOA_ENROLLMENT_SERVICE', ['STATUS' => $ENR_UPDATE_DATA['STATUS']], 'update', " PK_ENROLLMENT_MASTER =  '$PK_ENROLLMENT_MASTER'");
            db_perform_account('DOA_ENROLLMENT_LEDGER', ['STATUS' => $ENR_UPDATE_DATA['STATUS']], 'update', " PK_ENROLLMENT_MASTER =  '$PK_ENROLLMENT_MASTER'");
        }
    }
}

function getAppointmentSerialNumber($PK_USER_MASTER)
{
    global $db_account;
    $appointment_data = $db_account->Execute("SELECT MAX(SERIAL_NUMBER) AS SERIAL_NUMBER FROM DOA_APPOINTMENT_MASTER LEFT JOIN DOA_APPOINTMENT_CUSTOMER ON DOA_APPOINTMENT_MASTER.PK_APPOINTMENT_MASTER = DOA_APPOINTMENT_CUSTOMER.PK_APPOINTMENT_MASTER  WHERE DOA_APPOINTMENT_CUSTOMER.PK_USER_MASTER = '$PK_USER_MASTER'");
    if ($appointment_data->RecordCount() > 0) {
        return $appointment_data->fields['SERIAL_NUMBER'] + 1;
    } else {
        return 1;
    }
}

function getGroupClassSerialNumber()
{
    global $db_account;
    $appointment_data = $db_account->Execute("SELECT MAX(SERIAL_NUMBER) AS SERIAL_NUMBER FROM DOA_APPOINTMENT_MASTER WHERE APPOINTMENT_TYPE = 'GROUP'");
    if ($appointment_data->RecordCount() > 0) {
        return $appointment_data->fields['SERIAL_NUMBER'] + 1;
    } else {
        return 1;
    }
}

function getAccessToken()
{
    global $db;
    $DEFAULT_LOCATION_ID = $_SESSION['DEFAULT_LOCATION_ID'];

    $location_data = $db->Execute("SELECT * FROM DOA_LOCATION WHERE PK_LOCATION IN (" . $DEFAULT_LOCATION_ID . ")");
    $client_id = constant('client_id');
    $client_secret = constant('client_secret');
    $ami_api_url = constant('ami_api_url') . '/oauth/v2/token';

    $AM_USER_NAME = $location_data->fields['AM_USER_NAME'];
    $AM_PASSWORD = $location_data->fields['AM_PASSWORD'];
    $AM_REFRESH_TOKEN = $location_data->fields['AM_REFRESH_TOKEN'];

    $user_credential = [
        'client_id' => $client_id,
        'client_secret' => $client_secret,
        'grant_type' => 'password',
        'username' => $AM_USER_NAME,
        'password' => $AM_PASSWORD
    ];

    $params = http_build_query($user_credential);
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $ami_api_url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_POST, true);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $params);

    $response = curl_exec($ch);
    if (curl_errno($ch)) {
        echo 'Curl error: ' . curl_error($ch);
    }
    curl_close($ch);

    return json_decode($response)->access_token;
}

function getStaffCode($access_token, $first_name, $last_name)
{
    $url = constant('ami_api_url') . '/api/v1/staff';

    $user_details = [
        'first_name' => $first_name,
        'last_name' => $last_name
    ];
    $url .= '?' . http_build_query($user_details);

    $curl = curl_init();

    curl_setopt_array($curl, array(
        CURLOPT_URL => $url,
        CURLOPT_RETURNTRANSFER => true,
        CURLOPT_ENCODING => "",
        CURLOPT_MAXREDIRS => 10,
        CURLOPT_TIMEOUT => 0,
        CURLOPT_FOLLOWLOCATION => true,
        CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
        CURLOPT_CUSTOMREQUEST => "GET",
        CURLOPT_HTTPHEADER => array(
            $access_token
        ),
    ));

    $response = curl_exec($curl);
    $data = json_decode($response, true);

    return $data[0]['id'] ?? '';
}

function callArturMurrayApi(string $url, array $data, string $access_token, $method = 'POST')
{
    $curl = curl_init();

    $param = http_build_query($data);

    curl_setopt_array($curl, array(
        CURLOPT_URL => $url,
        CURLOPT_RETURNTRANSFER => true,
        CURLOPT_ENCODING => "",
        CURLOPT_MAXREDIRS => 10,
        CURLOPT_TIMEOUT => 0,
        CURLOPT_FOLLOWLOCATION => true,
        CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
        CURLOPT_CUSTOMREQUEST => $method,
        CURLOPT_POST => false,
        CURLOPT_POSTFIELDS => $param,
        CURLOPT_HTTPHEADER => array(
            $access_token
        ),
    ));

    $response = curl_exec($curl);
    if (curl_errno($curl)) {
        echo 'Curl error: ' . curl_error($curl);
    }
    curl_close($curl);

    return $response;
}

function callArturMurrayApiGet(string $url, array $data, string $access_token)
{
    $url .= '?' . http_build_query($data);

    $curl = curl_init();

    curl_setopt_array($curl, array(
        CURLOPT_URL => $url,
        CURLOPT_RETURNTRANSFER => true,
        CURLOPT_ENCODING => "",
        CURLOPT_MAXREDIRS => 10,
        CURLOPT_TIMEOUT => 0,
        CURLOPT_FOLLOWLOCATION => true,
        CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
        CURLOPT_CUSTOMREQUEST => "GET",
        CURLOPT_HTTPHEADER => array(
            $access_token
        ),
    ));

    $response = curl_exec($curl);
    if (curl_errno($curl)) {
        echo 'Curl error: ' . curl_error($curl);
    }
    curl_close($curl);

    return $response;
}

function makeMiscComplete($PK_USER_MASTER): void
{
    global $db_account;
    $miscEnrollmentData = $db_account->Execute("SELECT DOA_ENROLLMENT_SERVICE.PK_ENROLLMENT_MASTER, DOA_ENROLLMENT_SERVICE.PK_ENROLLMENT_SERVICE, DOA_ENROLLMENT_SERVICE.NUMBER_OF_SESSION FROM DOA_ENROLLMENT_SERVICE LEFT JOIN DOA_ENROLLMENT_MASTER ON DOA_ENROLLMENT_MASTER.PK_ENROLLMENT_MASTER = DOA_ENROLLMENT_SERVICE.PK_ENROLLMENT_MASTER LEFT JOIN DOA_SERVICE_MASTER ON DOA_ENROLLMENT_SERVICE.PK_SERVICE_MASTER = DOA_SERVICE_MASTER.PK_SERVICE_MASTER WHERE DOA_ENROLLMENT_MASTER.STATUS = 'A' AND DOA_ENROLLMENT_MASTER.EXPIRY_DATE <= '" . date('Y-m-d') . "' AND DOA_SERVICE_MASTER.PK_SERVICE_CLASS = 5 AND DOA_ENROLLMENT_MASTER.PK_USER_MASTER = '$PK_USER_MASTER'");
    while (!$miscEnrollmentData->EOF) {
        $PK_ENROLLMENT_MASTER = $miscEnrollmentData->fields['PK_ENROLLMENT_MASTER'];

        $enr_total_amount = $db_account->Execute("SELECT SUM(FINAL_AMOUNT) AS TOTAL_AMOUNT FROM DOA_ENROLLMENT_SERVICE WHERE PK_ENROLLMENT_MASTER = " . $PK_ENROLLMENT_MASTER);
        $enr_paid_amount = $db_account->Execute("SELECT SUM(AMOUNT) AS TOTAL_PAID_AMOUNT FROM DOA_ENROLLMENT_PAYMENT WHERE TYPE = 'Payment' AND IS_REFUNDED = 0 AND PK_ENROLLMENT_MASTER = " . $PK_ENROLLMENT_MASTER);

        $paid_count = (($enr_total_amount->fields['TOTAL_AMOUNT'] == 0) || ($enr_paid_amount->fields['TOTAL_PAID_AMOUNT'] >= $enr_total_amount->fields['TOTAL_AMOUNT'])) ? 0 : 1;

        if ($paid_count === 0) {
            $ENR_UPDATE_DATA['ALL_APPOINTMENT_DONE'] = 1;
            $ENR_UPDATE_DATA['STATUS'] = 'CO';
            $ENR_SERVICE_UPDATE_DATA['STATUS'] = 'CO';
        } else {
            $ENR_UPDATE_DATA['ALL_APPOINTMENT_DONE'] = 0;
            $ENR_UPDATE_DATA['STATUS'] = 'A';
            $ENR_SERVICE_UPDATE_DATA['STATUS'] = 'A';
        }

        db_perform_account('DOA_ENROLLMENT_MASTER', $ENR_UPDATE_DATA, 'update', " PK_ENROLLMENT_MASTER = " . $PK_ENROLLMENT_MASTER);

        db_perform_account('DOA_ENROLLMENT_SERVICE', $ENR_SERVICE_UPDATE_DATA, 'update', " PK_ENROLLMENT_MASTER = " . $PK_ENROLLMENT_MASTER);
        db_perform_account('DOA_ENROLLMENT_LEDGER', $ENR_SERVICE_UPDATE_DATA, 'update', " PK_ENROLLMENT_MASTER = " . $PK_ENROLLMENT_MASTER);

        $miscEnrollmentData->MoveNext();
    }
}

function makeDroppedCancelled($PK_USER_MASTER): void
{
    global $db_account;
    $miscEnrollmentData = $db_account->Execute("SELECT PK_ENROLLMENT_MASTER FROM DOA_ENROLLMENT_MASTER WHERE ENROLLMENT_NAME LIKE '%Dropped%' AND DOA_ENROLLMENT_MASTER.PK_USER_MASTER = '$PK_USER_MASTER'");
    while (!$miscEnrollmentData->EOF) {
        $PK_ENROLLMENT_MASTER = $miscEnrollmentData->fields['PK_ENROLLMENT_MASTER'];

        $ENR_UPDATE_DATA['ALL_APPOINTMENT_DONE'] = 1;
        $ENR_UPDATE_DATA['STATUS'] = 'C';
        db_perform_account('DOA_ENROLLMENT_MASTER', $ENR_UPDATE_DATA, 'update', " PK_ENROLLMENT_MASTER = " . $PK_ENROLLMENT_MASTER);

        $ENR_SERVICE_UPDATE_DATA['STATUS'] = 'C';
        db_perform_account('DOA_ENROLLMENT_SERVICE', $ENR_SERVICE_UPDATE_DATA, 'update', " PK_ENROLLMENT_MASTER = " . $PK_ENROLLMENT_MASTER);
        db_perform_account('DOA_ENROLLMENT_LEDGER', $ENR_SERVICE_UPDATE_DATA, 'update', " PK_ENROLLMENT_MASTER = " . $PK_ENROLLMENT_MASTER);

        $miscEnrollmentData->MoveNext();
    }
}

function makeExpiryEnrollmentComplete($PK_USER_MASTER): void
{
    global $db_account;

    $enrollmentServiceData = $db_account->Execute("SELECT DOA_ENROLLMENT_SERVICE.PK_ENROLLMENT_MASTER, SUM(DOA_ENROLLMENT_SERVICE.FINAL_AMOUNT) AS TOTAL_FINAL_AMOUNT, SUM(DOA_ENROLLMENT_SERVICE.TOTAL_AMOUNT_PAID) AS TOTAL_PAID FROM DOA_ENROLLMENT_SERVICE LEFT JOIN DOA_ENROLLMENT_MASTER ON DOA_ENROLLMENT_MASTER.PK_ENROLLMENT_MASTER = DOA_ENROLLMENT_SERVICE.PK_ENROLLMENT_MASTER WHERE DOA_ENROLLMENT_MASTER.STATUS = 'CO' AND DOA_ENROLLMENT_MASTER.PK_USER_MASTER = '$PK_USER_MASTER' GROUP BY DOA_ENROLLMENT_SERVICE.PK_ENROLLMENT_MASTER HAVING TOTAL_FINAL_AMOUNT > TOTAL_PAID OR TOTAL_FINAL_AMOUNT > 0");
    while (!$enrollmentServiceData->EOF) {
        $ENR_UPDATE_DATA['ALL_APPOINTMENT_DONE'] = 0;
        $ENR_UPDATE_DATA['STATUS'] = 'A';
        db_perform_account('DOA_ENROLLMENT_MASTER', $ENR_UPDATE_DATA, 'update', " PK_ENROLLMENT_MASTER = " . $enrollmentServiceData->fields['PK_ENROLLMENT_MASTER']);

        db_perform_account('DOA_ENROLLMENT_SERVICE', ['STATUS' => $ENR_UPDATE_DATA['STATUS']], 'update', " PK_ENROLLMENT_MASTER = " . $enrollmentServiceData->fields['PK_ENROLLMENT_MASTER']);
        db_perform_account('DOA_ENROLLMENT_LEDGER', ['STATUS' => $ENR_UPDATE_DATA['STATUS']], 'update', " PK_ENROLLMENT_MASTER = " . $enrollmentServiceData->fields['PK_ENROLLMENT_MASTER']);

        $enrollmentServiceData->MoveNext();
    }

    $enrollmentServiceData = $db_account->Execute("SELECT DOA_ENROLLMENT_SERVICE.PK_ENROLLMENT_MASTER, SUM(DOA_ENROLLMENT_SERVICE.NUMBER_OF_SESSION) AS TOTAL_SESSION, SUM(DOA_ENROLLMENT_SERVICE.FINAL_AMOUNT) AS SUM_FINAL_AMOUNT, SUM(DOA_ENROLLMENT_SERVICE.TOTAL_AMOUNT_PAID) AS SUM_TOTAL_PAID FROM DOA_ENROLLMENT_SERVICE LEFT JOIN DOA_ENROLLMENT_MASTER ON DOA_ENROLLMENT_MASTER.PK_ENROLLMENT_MASTER = DOA_ENROLLMENT_SERVICE.PK_ENROLLMENT_MASTER LEFT JOIN DOA_SERVICE_CODE ON DOA_ENROLLMENT_SERVICE.PK_SERVICE_CODE = DOA_SERVICE_CODE.PK_SERVICE_CODE WHERE DOA_ENROLLMENT_MASTER.STATUS = 'A' AND DOA_ENROLLMENT_MASTER.EXPIRY_DATE <= '" . date('Y-m-d') . "' AND DOA_SERVICE_CODE.SERVICE_CODE LIKE '%PRI%' AND DOA_ENROLLMENT_MASTER.PK_USER_MASTER = '" . $PK_USER_MASTER . "' GROUP BY DOA_ENROLLMENT_SERVICE.PK_ENROLLMENT_MASTER HAVING (SUM(DOA_ENROLLMENT_SERVICE.FINAL_AMOUNT) <= SUM(DOA_ENROLLMENT_SERVICE.TOTAL_AMOUNT_PAID)) OR SUM(DOA_ENROLLMENT_SERVICE.FINAL_AMOUNT) = 0");
    while (!$enrollmentServiceData->EOF) {
        $SESSION_COMPLETED_COUNT = getSessionCompletedCountOfEnrollment($enrollmentServiceData->fields['PK_ENROLLMENT_MASTER']);
        if ($enrollmentServiceData->fields['TOTAL_SESSION'] <= $SESSION_COMPLETED_COUNT) {
            $ENR_UPDATE_DATA['ALL_APPOINTMENT_DONE'] = 1;
            $ENR_UPDATE_DATA['STATUS'] = 'CO';
            db_perform_account('DOA_ENROLLMENT_MASTER', $ENR_UPDATE_DATA, 'update', " PK_ENROLLMENT_MASTER = " . $enrollmentServiceData->fields['PK_ENROLLMENT_MASTER']);

            db_perform_account('DOA_ENROLLMENT_SERVICE', ['STATUS' => $ENR_UPDATE_DATA['STATUS']], 'update', " PK_ENROLLMENT_MASTER = " . $enrollmentServiceData->fields['PK_ENROLLMENT_MASTER']);
            db_perform_account('DOA_ENROLLMENT_LEDGER', ['STATUS' => $ENR_UPDATE_DATA['STATUS']], 'update', " PK_ENROLLMENT_MASTER = " . $enrollmentServiceData->fields['PK_ENROLLMENT_MASTER']);
        }

        $enrollmentServiceData->MoveNext();
    }

    $oldEnrollmentData = $db_account->Execute("SELECT PK_ENROLLMENT_MASTER FROM `DOA_ENROLLMENT_MASTER` WHERE `ENROLLMENT_DATE` <= '2021-12-31' AND `PK_USER_MASTER` = '$PK_USER_MASTER' AND `STATUS` = 'A'");
    while (!$oldEnrollmentData->EOF) {
        $PK_ENROLLMENT_MASTER = $oldEnrollmentData->fields['PK_ENROLLMENT_MASTER'];
        $ENR_UPDATE_DATA['ALL_APPOINTMENT_DONE'] = 1;
        $ENR_UPDATE_DATA['STATUS'] = 'CO';
        db_perform_account('DOA_ENROLLMENT_MASTER', $ENR_UPDATE_DATA, 'update', " PK_ENROLLMENT_MASTER = " . $PK_ENROLLMENT_MASTER);

        db_perform_account('DOA_ENROLLMENT_SERVICE', ['STATUS' => $ENR_UPDATE_DATA['STATUS']], 'update', " PK_ENROLLMENT_MASTER = " . $PK_ENROLLMENT_MASTER);
        db_perform_account('DOA_ENROLLMENT_LEDGER', ['STATUS' => $ENR_UPDATE_DATA['STATUS']], 'update', " PK_ENROLLMENT_MASTER = " . $PK_ENROLLMENT_MASTER);

        $oldEnrollmentData->MoveNext();
    }

    /* $enrollmentServiceData = $db_account->Execute("SELECT DOA_ENROLLMENT_SERVICE.PK_ENROLLMENT_MASTER, SUM(DOA_ENROLLMENT_SERVICE.NUMBER_OF_SESSION) AS TOTAL_SESSIONS, SUM(DOA_ENROLLMENT_SERVICE.FINAL_AMOUNT) AS TOTAL_FINAL_AMOUNT, SUM(DOA_ENROLLMENT_SERVICE.TOTAL_AMOUNT_PAID) AS TOTAL_PAID FROM DOA_ENROLLMENT_SERVICE LEFT JOIN DOA_ENROLLMENT_MASTER ON DOA_ENROLLMENT_MASTER.PK_ENROLLMENT_MASTER = DOA_ENROLLMENT_SERVICE.PK_ENROLLMENT_MASTER WHERE DOA_ENROLLMENT_MASTER.STATUS = 'A' AND DOA_ENROLLMENT_MASTER.EXPIRY_DATE <= '" . date('Y-m-d') . "' AND DOA_ENROLLMENT_MASTER.PK_USER_MASTER = '$PK_USER_MASTER' GROUP BY DOA_ENROLLMENT_SERVICE.PK_ENROLLMENT_MASTER HAVING TOTAL_FINAL_AMOUNT <= TOTAL_PAID OR TOTAL_FINAL_AMOUNT = 0");
    while (!$enrollmentServiceData->EOF) {
        $SESSION_COMPLETED_COUNT = getSessionCompletedCount($enrollmentServiceData->fields['PK_ENROLLMENT_SERVICE']);
        if ($enrollmentServiceData->fields['NUMBER_OF_SESSION'] <= $SESSION_COMPLETED_COUNT) {
        $ENR_UPDATE_DATA['ALL_APPOINTMENT_DONE'] = 1;
        $ENR_UPDATE_DATA['STATUS'] = 'CO';
        db_perform_account('DOA_ENROLLMENT_MASTER', $ENR_UPDATE_DATA, 'update', " PK_ENROLLMENT_MASTER = " . $enrollmentServiceData->fields['PK_ENROLLMENT_MASTER']);

        db_perform_account('DOA_ENROLLMENT_SERVICE', ['STATUS' => $ENR_UPDATE_DATA['STATUS']], 'update', " PK_ENROLLMENT_MASTER = " . $enrollmentServiceData->fields['PK_ENROLLMENT_MASTER']);
        db_perform_account('DOA_ENROLLMENT_LEDGER', ['STATUS' => $ENR_UPDATE_DATA['STATUS']], 'update', " PK_ENROLLMENT_MASTER = " . $enrollmentServiceData->fields['PK_ENROLLMENT_MASTER']);
        }

        $enrollmentServiceData->MoveNext();
    } */
}

function checkAllEnrollmentStatus($PK_USER_MASTER): void
{
    global $db_account;
    $allActiveEnrollment = $db_account->Execute("SELECT PK_ENROLLMENT_MASTER FROM DOA_ENROLLMENT_MASTER WHERE STATUS = 'A' AND PK_USER_MASTER = '$PK_USER_MASTER' ORDER BY ENROLLMENT_DATE ASC");
    while (!$allActiveEnrollment->EOF) {
        markAdhocAppointmentNormal($allActiveEnrollment->fields['PK_ENROLLMENT_MASTER']);
        //markEnrollmentComplete($allActiveEnrollment->fields['PK_ENROLLMENT_MASTER']);
        $allActiveEnrollment->MoveNext();
    }
}

function deleteEnrollment($PK_ENROLLMENT_MASTER)
{
    global $db_account;

    $db_account->Execute("DELETE FROM `DOA_ENROLLMENT_BALANCE` WHERE `PK_ENROLLMENT_MASTER` = " . $PK_ENROLLMENT_MASTER);
    $db_account->Execute("DELETE FROM `DOA_ENROLLMENT_BILLING` WHERE `PK_ENROLLMENT_MASTER` = " . $PK_ENROLLMENT_MASTER);
    $db_account->Execute("DELETE FROM `DOA_ENROLLMENT_LEDGER` WHERE `PK_ENROLLMENT_MASTER` = " . $PK_ENROLLMENT_MASTER);
    $db_account->Execute("DELETE FROM `DOA_ENROLLMENT_MASTER` WHERE `PK_ENROLLMENT_MASTER` = " . $PK_ENROLLMENT_MASTER);
    //$db_account->Execute("DELETE FROM `DOA_ENROLLMENT_PAYMENT` WHERE `PK_ENROLLMENT_MASTER` = " . $PK_ENROLLMENT_MASTER);
    $db_account->Execute("DELETE FROM `DOA_ENROLLMENT_SERVICE` WHERE `PK_ENROLLMENT_MASTER` = " . $PK_ENROLLMENT_MASTER);
    $db_account->Execute("DELETE FROM `DOA_ENROLLMENT_SERVICE_PROVIDER` WHERE `PK_ENROLLMENT_MASTER` = " . $PK_ENROLLMENT_MASTER);

    $db_account->Execute("DELETE FROM DOA_APPOINTMENT_ENROLLMENT WHERE PK_ENROLLMENT_MASTER = " . $PK_ENROLLMENT_MASTER);
    $db_account->Execute("DELETE FROM DOA_APPOINTMENT_MASTER WHERE PK_ENROLLMENT_MASTER = " . $PK_ENROLLMENT_MASTER);
    $db_account->Execute("DELETE DOA_APPOINTMENT_CUSTOMER FROM DOA_APPOINTMENT_CUSTOMER LEFT JOIN DOA_APPOINTMENT_MASTER ON DOA_APPOINTMENT_MASTER.PK_APPOINTMENT_MASTER=DOA_APPOINTMENT_CUSTOMER.PK_APPOINTMENT_MASTER WHERE DOA_APPOINTMENT_MASTER.PK_ENROLLMENT_MASTER = " . $PK_ENROLLMENT_MASTER);
    $db_account->Execute("DELETE DOA_APPOINTMENT_SERVICE_PROVIDER FROM DOA_APPOINTMENT_SERVICE_PROVIDER LEFT JOIN DOA_APPOINTMENT_MASTER ON DOA_APPOINTMENT_MASTER.PK_APPOINTMENT_MASTER=DOA_APPOINTMENT_SERVICE_PROVIDER.PK_APPOINTMENT_MASTER WHERE DOA_APPOINTMENT_MASTER.PK_ENROLLMENT_MASTER = " . $PK_ENROLLMENT_MASTER);
    $db_account->Execute("DELETE DOA_APPOINTMENT_STATUS_HISTORY FROM DOA_APPOINTMENT_STATUS_HISTORY LEFT JOIN DOA_APPOINTMENT_MASTER ON DOA_APPOINTMENT_MASTER.PK_APPOINTMENT_MASTER=DOA_APPOINTMENT_STATUS_HISTORY.PK_APPOINTMENT_MASTER WHERE DOA_APPOINTMENT_MASTER.PK_ENROLLMENT_MASTER = " . $PK_ENROLLMENT_MASTER);
}

function generateReceiptNumber($PK_ENROLLMENT_MASTER)
{
    global $db;
    global $db_account;
    $PK_LOCATION = getPkLocation();
    $receipt_data = $db->Execute("SELECT `RECEIPT_CHARACTER` FROM `DOA_LOCATION` WHERE `PK_LOCATION` = " . $PK_LOCATION);
    $RECEIPT_CHARACTER = $receipt_data->fields['RECEIPT_CHARACTER'];

    $receipt = $db_account->Execute("SELECT COUNT(RECEIPT_NUMBER) AS TOTAL_RECEIPT FROM DOA_ENROLLMENT_PAYMENT WHERE IS_ORIGINAL_RECEIPT = 1 AND PK_LOCATION = " . $PK_LOCATION);
    $TOTAL_RECEIPT = $receipt->fields['TOTAL_RECEIPT'];
    return (($RECEIPT_CHARACTER == null) ? ($TOTAL_RECEIPT + 1) : $RECEIPT_CHARACTER . '-' . ($TOTAL_RECEIPT + 1));

    /* $enrollment_location = $db_account->Execute("SELECT `PK_LOCATION` FROM `DOA_ENROLLMENT_MASTER` WHERE `PK_ENROLLMENT_MASTER` = " . $PK_ENROLLMENT_MASTER);
    $PK_LOCATION = $enrollment_location->fields['PK_LOCATION'];
    $receipt_data = $db->Execute("SELECT `RECEIPT_CHARACTER` FROM `DOA_LOCATION` WHERE `PK_LOCATION` = " . $PK_LOCATION);
    $RECEIPT_CHARACTER = $receipt_data->fields['RECEIPT_CHARACTER'];

    $receipt = $db_account->Execute("SELECT COUNT(RECEIPT_NUMBER) AS TOTAL_RECEIPT FROM DOA_ENROLLMENT_PAYMENT INNER JOIN DOA_ENROLLMENT_MASTER ON DOA_ENROLLMENT_PAYMENT.PK_ENROLLMENT_MASTER = DOA_ENROLLMENT_MASTER.PK_ENROLLMENT_MASTER WHERE IS_ORIGINAL_RECEIPT = 1 AND DOA_ENROLLMENT_MASTER.PK_LOCATION = " . $PK_LOCATION);
    $TOTAL_RECEIPT = $receipt->fields['TOTAL_RECEIPT'];
    return (($RECEIPT_CHARACTER == null) ? ($TOTAL_RECEIPT + 1) : $RECEIPT_CHARACTER . '-' . ($TOTAL_RECEIPT + 1)); */
}

function getPkLocation()
{
    $DEFAULT_LOCATION_ID = explode(',', $_SESSION['DEFAULT_LOCATION_ID']);
    $PK_LOCATION = $DEFAULT_LOCATION_ID[0];

    return $PK_LOCATION;
}

function getPaymentGatewayData()
{
    global $db;
    $DEFAULT_LOCATION_ID = explode(',', $_SESSION['DEFAULT_LOCATION_ID']);

    if (count($DEFAULT_LOCATION_ID) == 1) {
        $payment_gateway_data = $db->Execute("SELECT * FROM DOA_LOCATION WHERE PK_LOCATION = $DEFAULT_LOCATION_ID[0]");
        if ($payment_gateway_data->fields['PAYMENT_GATEWAY_TYPE'] == '' || $payment_gateway_data->fields['PAYMENT_GATEWAY_TYPE'] == null) {
            $payment_gateway_data = $db->Execute("SELECT DOA_CORPORATION.* FROM DOA_CORPORATION INNER JOIN DOA_LOCATION ON DOA_CORPORATION.PK_CORPORATION = DOA_LOCATION.PK_CORPORATION WHERE DOA_LOCATION.PK_LOCATION = $DEFAULT_LOCATION_ID[0]");
        }
    } else {
        $payment_gateway_data = $db->Execute("SELECT DOA_CORPORATION.* FROM DOA_CORPORATION INNER JOIN DOA_LOCATION ON DOA_CORPORATION.PK_CORPORATION = DOA_LOCATION.PK_CORPORATION WHERE DOA_LOCATION.PK_LOCATION IN (" . implode(',', $DEFAULT_LOCATION_ID) . ")");
    }

    return $payment_gateway_data;
}

function getTwilioSettingData($PK_LOCATION)
{
    global $db;
    $location_data = $db->Execute("SELECT * FROM DOA_LOCATION WHERE PK_LOCATION = $PK_LOCATION");
    if ($location_data->fields['TEXTING_FEATURE_ENABLED'] == 1) {
        if ($location_data->fields['TWILIO_ACCOUNT_TYPE'] == 1) {
            return [$location_data->fields['SID'], $location_data->fields['TOKEN'], $location_data->fields['TWILIO_PHONE_NO']];
        } else {
            $text_setting = $db->Execute("SELECT * FROM `DOA_TEXT_SETTINGS` WHERE PK_TEXT_SETTINGS = 1");
            return [$text_setting->fields['SID'], $text_setting->fields['TOKEN'], $text_setting->fields['FROM_NO']];
        }
    } else {
        $corporation_data = $db->Execute("SELECT DOA_CORPORATION.* FROM DOA_CORPORATION INNER JOIN DOA_LOCATION ON DOA_CORPORATION.PK_CORPORATION = DOA_LOCATION.PK_CORPORATION WHERE DOA_LOCATION.PK_LOCATION = $PK_LOCATION");
        if ($corporation_data->fields['TEXTING_FEATURE_ENABLED'] == 1) {
            if ($corporation_data->fields['TWILIO_ACCOUNT_TYPE'] == 1) {
                return [$corporation_data->fields['SID'], $corporation_data->fields['TOKEN'], $corporation_data->fields['TWILIO_PHONE_NO']];
            } else {
                $text_setting = $db->Execute("SELECT * FROM `DOA_TEXT_SETTINGS` WHERE PK_TEXT_SETTINGS = 1");
                return [$text_setting->fields['SID'], $text_setting->fields['TOKEN'], $text_setting->fields['FROM_NO']];
            }
        } else {
            return [null, null, null];
        }
    }
}

function getWeekStartAndEndDate($date)
{
    $dt = new DateTime($date);

    // Clone and modify to get the previous Sunday (or same day if it's Sunday)
    $startOfWeek = clone $dt;
    $startOfWeek->modify('Sunday last week');
    if ($dt->format('w') == 0) {
        $startOfWeek = clone $dt; // It's already Sunday
    }

    // End of the week is Saturday
    $endOfWeek = clone $startOfWeek;
    $endOfWeek->modify('+6 days');

    return [
        'start' => $startOfWeek->format('Y-m-d'),
        'end'   => $endOfWeek->format('Y-m-d')
    ];
}

function getMonthStartAndEndDate($date)
{
    $dt = new DateTime($date);
    $startOfMonth = $dt->format('Y-m-01');
    $endOfMonth = $dt->format('Y-m-t');

    return [
        'start' => $startOfMonth,
        'end'   => $endOfMonth
    ];
}

function isSevenYearsExpired($dateString)
{
    $date = new DateTime($dateString);
    $sevenYearsAgo = new DateTime();
    $sevenYearsAgo->modify('-7 years');

    return $date < $sevenYearsAgo;
}
